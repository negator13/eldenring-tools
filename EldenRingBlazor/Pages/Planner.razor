@page "/build/{buildId?}"
@page "/builds/{buildId?}"
@page "/planner/{buildId?}"
@page "/buildplanner/{buildId?}"

@using EldenRingBlazor.Services
@using EldenRingBlazor.Services.AttackRating
@using EldenRingBlazor.Services.BuildPersistence
@using EldenRingBlazor.Services.BuildPlanner
@using EldenRingBlazor.Services.Equipment
@using EldenRingBlazor.Components
@inject BuildPlannerService CalculationService
@inject EquipmentService EquipmentService
@inject SaveBuildService SaveBuildService
@inject NavigationManager NavigationManager

<PageTitle>Build Planner</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">Build Planner</MudText>
    <MudGrid Spacing="6">
        <MudItem sm="12" md="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick=SaveBuild>Save Build</MudButton>

                <MudGrid>

                    <MudItem xs="6">
                        <MudTextField Label="Name" Variant="Variant.Text" @bind-Value="@input.Name" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudSelect Label="Starting Class" T="string" Variant="Variant.Text"
                                   Value="@input.StartingClass?.Name"
                                   ValueChanged="@UpdateStartingClass">
                            @foreach (var startingClass in startingClasses)
                            {
                                <MudSelectItem Value="@startingClass.Name">@startingClass.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Level: <b>@input.DisplayLevel</b></MudText>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Vigor" Variant="Variant.Outlined" Value="@input.EffectiveVigor" ValueChanged="UpdateVigor" Min=@input.StartingClass.Vigor Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Mind" Variant="Variant.Outlined" Value="@input.EffectiveMind" ValueChanged="UpdateMind" Min=@input.StartingClass.Mind Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Endurance" Variant="Variant.Outlined" Value="@input.EffectiveEndurance" ValueChanged="UpdateEndurance" Min=@input.StartingClass.Endurance Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Strength" Variant="Variant.Outlined" Value="@input.EffectiveStrength" ValueChanged="UpdateStrength" Min=@input.StartingClass.Strength Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Dexterity" Variant="Variant.Outlined" Value="@input.EffectiveDexterity" ValueChanged="UpdateDexterity" Min=@input.StartingClass.Dexterity Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Intelligence" Variant="Variant.Outlined" Value="@input.EffectiveIntelligence" ValueChanged="UpdateIntelligence" Min=@input.StartingClass.Intelligence Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Faith" Variant="Variant.Outlined" Value="@input.EffectiveFaith" ValueChanged="UpdateFaith" Min=@input.StartingClass.Faith Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Arcane" Variant="Variant.Outlined" Value="@input.EffectiveArcane" ValueChanged="UpdateArcane" Min=@input.StartingClass.Arcane Max=99 />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Head"
                                         Value="@input.Head?.Name"
                                         ValueChanged="UpdateHead"
                                         SearchFunc="HeadArmorSearch"
                                         ResetValueOnEmptyText=true
                                         MaxItems="1000" />

                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Chest"
                                         Value="@input.Chest?.Name"
                                         ValueChanged="UpdateChest"
                                         SearchFunc="ChestArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Arms"
                                         Value="@input.Arms?.Name"
                                         ValueChanged="UpdateArms"
                                         SearchFunc="ArmsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Legs"
                                         Value="@input.Legs?.Name"
                                         ValueChanged="UpdateLegs"
                                         SearchFunc="LegsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>

                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 1"
                                         Value="@input.Talisman1?.Name"
                                         ValueChanged="UpdateTalisman1"
                                         SearchFunc="Talisman1Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 2"
                                         Value="@input.Talisman2?.Name"
                                         ValueChanged="UpdateTalisman2"
                                         SearchFunc="Talisman2Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 3"
                                         Value="@input.Talisman3?.Name"
                                         ValueChanged="UpdateTalisman3"
                                         SearchFunc="Talisman3Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 4"
                                         Value="@input.Talisman4?.Name"
                                         ValueChanged="UpdateTalisman4"
                                         SearchFunc="Talisman4Search"
                                         MaxItems="1000" />
                    </MudItem>

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem sm="12" md="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudItem xs="6">
                    <MudSwitch @bind-Checked="@TwoHand" Label="Two-Hand Weapons" Color="Color.Info" />
                </MudItem>

                <WeaponSlotComponent Slot=input.RightWeapon1
                                     Input=input
                                     Calculation=calculation.RightWeapon1
                                     UpdateWeapon=UpdateRightWeapon1
                                     UpdateWeaponAffinity=UpdateRightWeapon1Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon1Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=input.RightWeapon2
                                     Input=input
                                     Calculation=calculation.RightWeapon2
                                     UpdateWeapon=UpdateRightWeapon2
                                     UpdateWeaponAffinity=UpdateRightWeapon2Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon2Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=input.RightWeapon3
                                     Input=input
                                     Calculation=calculation.RightWeapon3
                                     UpdateWeapon=UpdateRightWeapon3
                                     UpdateWeaponAffinity=UpdateRightWeapon3Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon3Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=input.LeftWeapon1
                                     Input=input
                                     Calculation=calculation.LeftWeapon1
                                     UpdateWeapon=UpdateLeftWeapon1
                                     UpdateWeaponAffinity=UpdateLeftWeapon1Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon1Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=input.LeftWeapon2
                                     Input=input
                                     Calculation=calculation.LeftWeapon2
                                     UpdateWeapon=UpdateLeftWeapon2
                                     UpdateWeaponAffinity=UpdateLeftWeapon2Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon2Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=input.LeftWeapon3
                                     Input=input
                                     Calculation=calculation.LeftWeapon3
                                     UpdateWeapon=UpdateLeftWeapon3
                                     UpdateWeaponAffinity=UpdateLeftWeapon3Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon3Level>
                </WeaponSlotComponent>

                <MudGrid>
                    @if (input.LeftWeapon3?.Weapon != null)
                    {
                        <MudList Clickable="true">
                            <MudListItem>
                                <div class="d-flex">
                                    <MudText>Total AR</MudText>
                                    <MudText Inline="true" Class="ml-auto"><b>&nbsp;@calculation.LeftWeapon3?.DisplayTotalAttackRating</b></MudText>
                                </div>
                            </MudListItem>
                            <MudDivider />
                            @if (input.LeftWeapon3.Weapon?.WeaponType == "Sacred Seal" || input.LeftWeapon3.Weapon?.WeaponType == "Glintstone Staff")
                            {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudText>Sorc/Incant Scaling</MudText>
                                        <MudText Class="ml-auto">
                                            @string.Format("{0:0.0}", calculation.LeftWeapon3?.SorceryIncantation.Total)
                                        </MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem sm="12" md="4">

            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Level</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@input.DisplayLevel</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>HP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayHp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>FP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Stamina</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayStamina</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Equip Load</MudText>
                            <MudText Inline="true" Class="ml-auto"><b><span style="@StyleEquipBurden(calculation.EquipBurdenPercent)">@calculation.DisplayWeight</span> / @calculation.DisplayEquipLoad <span style="@StyleEquipBurden(calculation.EquipBurdenPercent)">(@calculation.EquipBurdenPercent%)</span></b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Discovery</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayDiscovery</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Poise</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPoise</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayPhysicalNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Strike</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayStrikeNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Slash</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplaySlashNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Pierce</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayPierceNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayMagicDefense / @calculation.DisplayMagicNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFireDefense / @calculation.DisplayFireNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayLightningDefense / @calculation.DisplayLightningNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayHolyDefense / @calculation.DisplayHolyNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Immunity</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayImmunity / @calculation.ImmunityArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Robustness</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayRobustness / @calculation.RobustnessArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Focus</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFocus / @calculation.FocusArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Vitality</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayVitality / @calculation.VitalityArmor</b></MudText>
                        </div>
                    </MudListItem>
                </MudList>

            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string? BuildId { get; set; }

    private EditContext? EditContext;
    private CharacterStatsCalculation calculation = new CharacterStatsCalculation();
    private BuildPlannerInput input;

    public Planner()
    {
        input = new BuildPlannerInput(EquipmentService);
    }

    private List<Talisman> talismans = new List<Talisman>();

    private IEnumerable<string> talismanNames = new List<string>();

    private List<Armor> headArmors = new List<Armor>();
    private List<Armor> chestArmors = new List<Armor>();
    private List<Armor> armsArmors = new List<Armor>();
    private List<Armor> legsArmors = new List<Armor>();

    private IEnumerable<string> headArmorNames = new List<string>();
    private IEnumerable<string> chestArmorNames = new List<string>();
    private IEnumerable<string> armsArmorNames = new List<string>();
    private IEnumerable<string> legsArmorNames = new List<string>();

    private List<StartingClass> startingClasses = new List<StartingClass>();

    private bool statUpdatedSinceChangingStartingClass = false;

    protected override void OnInitialized()
    {
        talismans = EquipmentService.Talismans.OrderBy(a => a.Name).ToList();

        talismanNames = talismans.Select(a => a.Name);

        headArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Head").OrderBy(a => a.Name).ToList();

        chestArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Body").OrderBy(a => a.Name).ToList();

        armsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Arm").OrderBy(a => a.Name).ToList();

        legsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Leg").OrderBy(a => a.Name).ToList();

        headArmorNames = headArmors.Select(a => a.Name);
        chestArmorNames = chestArmors.Select(a => a.Name);
        armsArmorNames = armsArmors.Select(a => a.Name);
        legsArmorNames = legsArmors.Select(a => a.Name);

        startingClasses = EquipmentService.StartingClasses.OrderBy(a => a.Name).ToList();

        var vagabond = startingClasses.Single(c => c.Name == "Vagabond");
        input = new BuildPlannerInput(EquipmentService)
            {
                StartingClass = vagabond,
                Vigor = vagabond.Vigor,
                Mind = vagabond.Mind,
                Endurance = vagabond.Endurance,
                Strength = vagabond.Strength,
                Dexterity = vagabond.Dexterity,
                Intelligence = vagabond.Intelligence,
                Faith = vagabond.Faith,
                Arcane = vagabond.Arcane,
            };

        EditContext = new EditContext(input);

        HandleValidSubmit();

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        var vagabond = startingClasses.Single(c => c.Name == "Vagabond");

        if (BuildId != null)
        {
            input = await SaveBuildService.LoadBuild(BuildId);
        }
        else
        {
            input = new BuildPlannerInput(EquipmentService)
                {
                    StartingClass = vagabond,
                    Vigor = vagabond.Vigor,
                    Mind = vagabond.Mind,
                    Endurance = vagabond.Endurance,
                    Strength = vagabond.Strength,
                    Dexterity = vagabond.Dexterity,
                    Intelligence = vagabond.Intelligence,
                    Faith = vagabond.Faith,
                    Arcane = vagabond.Arcane,
                };
        }

        EditContext = new EditContext(input);


        HandleValidSubmit();

        await base.OnParametersSetAsync();
    }

    private Task<IEnumerable<string>> HeadArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Head?.Name)
            {
                return Task.FromResult(headArmorNames);
            }

            return Task.FromResult(headArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(headArmorNames);
        }
    }

    private Task<IEnumerable<string>> ChestArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Chest?.Name)
            {
                return Task.FromResult(chestArmorNames);
            }

            return Task.FromResult(chestArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(chestArmorNames);
        }
    }

    private Task<IEnumerable<string>> ArmsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Arms?.Name)
            {
                return Task.FromResult(armsArmorNames);
            }

            return Task.FromResult(armsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(armsArmorNames);
        }
    }

    private Task<IEnumerable<string>> LegsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Legs?.Name)
            {
                return Task.FromResult(legsArmorNames);
            }

            return Task.FromResult(legsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(legsArmorNames);
        }
    }

    private Task<IEnumerable<string>> Talisman1Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Talisman1?.Name)
            {
                return Task.FromResult(talismanNames);
            }

            return Task.FromResult(talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman2Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Talisman2?.Name)
            {
                return Task.FromResult(talismanNames);
            }

            return Task.FromResult(talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman3Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Talisman3?.Name)
            {
                return Task.FromResult(talismanNames);
            }

            return Task.FromResult(talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman4Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Talisman4?.Name)
            {
                return Task.FromResult(talismanNames);
            }

            return Task.FromResult(talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(talismanNames);
        }
    }

    private void UpdateRightWeapon1(string name)
    {
        input.RightWeapon1.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2(string name)
    {
        input.RightWeapon2.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3(string name)
    {
        input.RightWeapon3.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1(string name)
    {
        input.LeftWeapon1.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2(string name)
    {
        input.LeftWeapon2.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3(string name)
    {
        input.LeftWeapon3.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private bool TwoHand
    {
        get
        {
            return input.TwoHand;
        }
        set
        {
            input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateHead(string armor)
    {
        input.Head = headArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateChest(string armor)
    {
        input.Chest = chestArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateArms(string armor)
    {
        input.Arms = armsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateLegs(string armor)
    {
        input.Legs = legsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateTalisman1(string name)
    {
        input.Talisman1 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman2(string name)
    {
        input.Talisman2 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman3(string name)
    {
        input.Talisman3 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman4(string name)
    {
        input.Talisman4 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateVigor(int vig)
    {
        input.Vigor = vig - input.VigorBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateMind(int mind)
    {
        input.Mind = mind - input.MindBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateEndurance(int end)
    {
        input.Endurance = end - input.EnduranceBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateStrength(int str)
    {
        input.Strength = str - input.StrengthBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        input.Dexterity = dex - input.DexterityBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        input.Intelligence = inte - input.IntelligenceBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        input.Faith = fth - input.FaithBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        input.Arcane = arc - input.ArcaneBonus;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Affinity(int id)
    {
        input.RightWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Level(int level)
    {
        input.RightWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Affinity(int id)
    {
        input.RightWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Level(int level)
    {
        input.RightWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Affinity(int id)
    {
        input.RightWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Level(int level)
    {
        input.RightWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Affinity(int id)
    {
        input.LeftWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Level(int level)
    {
        input.LeftWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Affinity(int id)
    {
        input.LeftWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Level(int level)
    {
        input.LeftWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Affinity(int id)
    {
        input.LeftWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Level(int level)
    {
        input.LeftWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateStartingClass(string name)
    {
        var startingClass = startingClasses.SingleOrDefault(c => c.Name == name);
        if (startingClass == null)
        {
            return;
        }

        input.StartingClass = startingClass;

        // TODO: Scope this flag to each specific stat, refactor to use Math.Max for each
        if (statUpdatedSinceChangingStartingClass)
        {
            input.Vigor = input.Vigor < startingClass.Vigor ? startingClass.Vigor : input.Vigor;
            input.Mind = input.Mind < startingClass.Mind ? startingClass.Mind : input.Mind;
            input.Endurance = input.Endurance < startingClass.Endurance ? startingClass.Endurance : input.Endurance;
            input.Strength = input.Strength < startingClass.Strength ? startingClass.Strength : input.Strength;
            input.Dexterity = input.Dexterity < startingClass.Dexterity ? startingClass.Dexterity : input.Dexterity;
            input.Intelligence = input.Intelligence < startingClass.Intelligence ? startingClass.Intelligence : input.Intelligence;
            input.Faith = input.Faith < startingClass.Faith ? startingClass.Faith : input.Faith;
            input.Arcane = input.Arcane < startingClass.Arcane ? startingClass.Arcane : input.Arcane;
        }
        else
        {
            input.Vigor = startingClass.Vigor;
            input.Mind = startingClass.Mind;
            input.Endurance = startingClass.Endurance;
            input.Strength = startingClass.Strength;
            input.Dexterity = startingClass.Dexterity;
            input.Intelligence = startingClass.Intelligence;
            input.Faith = startingClass.Faith;
            input.Arcane = startingClass.Arcane;
        }

        statUpdatedSinceChangingStartingClass = false;

        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        if (input == null)
        {
            return;
        }

        CharacterStatsCalculation? newCalc = null;

        try
        {
            newCalc = CalculationService.CalculateStats(input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            calculation = newCalc;
        }

        UpdateWeaponRequirements();
    }

    private void UpdateWeaponRequirements()
    {
        input.RightWeapon1.GetScalingRequirements(calculation.RightWeapon1);
        input.RightWeapon2.GetScalingRequirements(calculation.RightWeapon2);
        input.RightWeapon3.GetScalingRequirements(calculation.RightWeapon3);
        input.LeftWeapon1.GetScalingRequirements(calculation.LeftWeapon1);
        input.LeftWeapon2.GetScalingRequirements(calculation.LeftWeapon2);
        input.LeftWeapon3.GetScalingRequirements(calculation.LeftWeapon3);
    }


    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    private string StyleEquipBurden(double burden)
    {
        return burden < 70 ? "" : "font-weight: bold; color:red";
    }

    private async Task SaveBuild()
    {
        if (input == null)
        {
            return;
        }

        var buildId = await SaveBuildService.SaveBuild(input);

        NavigationManager.NavigateTo($"/build/{buildId}");
    }
}
