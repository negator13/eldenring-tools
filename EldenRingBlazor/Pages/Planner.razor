@page "/build/{buildId?}"
@page "/builds/{buildId?}"
@page "/planner/{buildId?}"
@page "/buildplanner/{buildId?}"

@using EldenRingBlazor.Services
@using EldenRingBlazor.Services.AttackRating
@using EldenRingBlazor.Services.BuildPersistence
@using EldenRingBlazor.Services.BuildPlanner
@using EldenRingBlazor.Services.Equipment
@using EldenRingBlazor.Components
@using EldenRingBlazor.WellKnown
@inject BuildPlannerService CalculationService
@inject EquipmentService EquipmentService
@inject SaveBuildService SaveBuildService
@inject NavigationManager NavigationManager

<PageTitle>Build Planner</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">Build Planner</MudText>
    <MudGrid Spacing="6">
        <MudItem sm="12" md="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick=SaveBuild>Save Build</MudButton>

                <MudGrid>

                    <MudItem xs="6">
                        <MudTextField Label="Name" Variant="Variant.Text" @bind-Value="@_input.Name" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudSelect Label="Starting Class" T="string" Variant="Variant.Text"
                                   Value="@_input.StartingClass?.Name"
                                   ValueChanged="@UpdateStartingClass">
                            @foreach (var startingClass in _startingClasses)
                            {
                                <MudSelectItem Value="@startingClass.Name">@startingClass.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudText>Level: <b>@_input.DisplayLevel</b></MudText>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Vigor" Variant="Variant.Outlined" Value="@_input.EffectiveVigor" ValueChanged="UpdateVigor" Min=@_input.StartingClass.Vigor Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Mind" Variant="Variant.Outlined" Value="@_input.EffectiveMind" ValueChanged="UpdateMind" Min=@_input.StartingClass.Mind Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Endurance" Variant="Variant.Outlined" Value="@_input.EffectiveEndurance" ValueChanged="UpdateEndurance" Min=@_input.StartingClass.Endurance Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Strength" Variant="Variant.Outlined" Value="@_input.EffectiveStrength" ValueChanged="UpdateStrength" Min=@_input.StartingClass.Strength Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Dexterity" Variant="Variant.Outlined" Value="@_input.EffectiveDexterity" ValueChanged="UpdateDexterity" Min=@_input.StartingClass.Dexterity Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Intelligence" Variant="Variant.Outlined" Value="@_input.EffectiveIntelligence" ValueChanged="UpdateIntelligence" Min=@_input.StartingClass.Intelligence Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Faith" Variant="Variant.Outlined" Value="@_input.EffectiveFaith" ValueChanged="UpdateFaith" Min=@_input.StartingClass.Faith Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Arcane" Variant="Variant.Outlined" Value="@_input.EffectiveArcane" ValueChanged="UpdateArcane" Min=@_input.StartingClass.Arcane Max=99 />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Head"
                                         Value="@_input.Head?.Name"
                                         ValueChanged="UpdateHead"
                                         SearchFunc="HeadArmorSearch"
                                         ResetValueOnEmptyText=true
                                         MaxItems="1000" />

                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Chest"
                                         Value="@_input.Chest?.Name"
                                         ValueChanged="UpdateChest"
                                         SearchFunc="ChestArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Arms"
                                         Value="@_input.Arms?.Name"
                                         ValueChanged="UpdateArms"
                                         SearchFunc="ArmsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Legs"
                                         Value="@_input.Legs?.Name"
                                         ValueChanged="UpdateLegs"
                                         SearchFunc="LegsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>

                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 1"
                                         Value="@_input.Talisman1?.Name"
                                         ValueChanged="UpdateTalisman1"
                                         SearchFunc="Talisman1Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 2"
                                         Value="@_input.Talisman2?.Name"
                                         ValueChanged="UpdateTalisman2"
                                         SearchFunc="Talisman2Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 3"
                                         Value="@_input.Talisman3?.Name"
                                         ValueChanged="UpdateTalisman3"
                                         SearchFunc="Talisman3Search"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudAutocomplete T="string"
                                         Label="Talisman 4"
                                         Value="@_input.Talisman4?.Name"
                                         ValueChanged="UpdateTalisman4"
                                         SearchFunc="Talisman4Search"
                                         MaxItems="1000" />
                    </MudItem>

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem sm="12" md="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudItem xs="6">
                    <MudSwitch @bind-Value="@TwoHand" Label="Two-Hand Weapons" Color="Color.Info" />
                </MudItem>

                <WeaponSlotComponent Slot=_input.RightWeapon1
                                     Input=_input
                                     Calculation=_calculation.RightWeapon1
                                     UpdateWeapon=UpdateRightWeapon1
                                     UpdateWeaponAffinity=UpdateRightWeapon1Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon1Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=_input.RightWeapon2
                                     Input=_input
                                     Calculation=_calculation.RightWeapon2
                                     UpdateWeapon=UpdateRightWeapon2
                                     UpdateWeaponAffinity=UpdateRightWeapon2Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon2Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=_input.RightWeapon3
                                     Input=_input
                                     Calculation=_calculation.RightWeapon3
                                     UpdateWeapon=UpdateRightWeapon3
                                     UpdateWeaponAffinity=UpdateRightWeapon3Affinity
                                     UpdateWeaponLevel=UpdateRightWeapon3Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=_input.LeftWeapon1
                                     Input=_input
                                     Calculation=_calculation.LeftWeapon1
                                     UpdateWeapon=UpdateLeftWeapon1
                                     UpdateWeaponAffinity=UpdateLeftWeapon1Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon1Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=_input.LeftWeapon2
                                     Input=_input
                                     Calculation=_calculation.LeftWeapon2
                                     UpdateWeapon=UpdateLeftWeapon2
                                     UpdateWeaponAffinity=UpdateLeftWeapon2Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon2Level>
                </WeaponSlotComponent>

                <WeaponSlotComponent Slot=_input.LeftWeapon3
                                     Input=_input
                                     Calculation=_calculation.LeftWeapon3
                                     UpdateWeapon=UpdateLeftWeapon3
                                     UpdateWeaponAffinity=UpdateLeftWeapon3Affinity
                                     UpdateWeaponLevel=UpdateLeftWeapon3Level>
                </WeaponSlotComponent>

                <MudGrid>
                    @if (_input.LeftWeapon3?.Weapon != null)
                    {
                        <MudList Clickable="true">
                            <MudListItem>
                                <div class="d-flex">
                                    <MudText>Total AR</MudText>
                                    <MudText Inline="true" Class="ml-auto"><b>&nbsp;@_calculation.LeftWeapon3?.DisplayTotalAttackRating</b></MudText>
                                </div>
                            </MudListItem>
                            <MudDivider />
                            @if (_input.LeftWeapon3.Weapon?.WeaponType == WeaponTypes.SacredSeal || _input.LeftWeapon3.Weapon?.WeaponType == WeaponTypes.GlintstoneStaff)
                            {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudText>@(_input.LeftWeapon3.Weapon?.WeaponType == WeaponTypes.SacredSeal ? "Incantation Scaling" : "Sorcery Scaling")</MudText>
                                        <MudText Class="ml-auto">
                                            @string.Format("{0:0.0}", _calculation.LeftWeapon3?.SorceryIncantation.Total)
                                        </MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem sm="12" md="4">

            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Level</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_input.DisplayLevel</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>HP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayHp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>FP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayFp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Stamina</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayStamina</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Equip Load</MudText>
                            <MudText Inline="true" Class="ml-auto"><b><span style="@StyleEquipBurden(_calculation.EquipBurdenPercent)">@_calculation.DisplayWeight</span> / @_calculation.DisplayEquipLoad <span style="@StyleEquipBurden(_calculation.EquipBurdenPercent)">(@_calculation.EquipBurdenPercent%)</span></b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Discovery</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayDiscovery</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Poise</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayPoise</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayPhysicalDefense / @_calculation.DisplayPhysicalNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Strike</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayPhysicalDefense / @_calculation.DisplayStrikeNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Slash</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayPhysicalDefense / @_calculation.DisplaySlashNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText Class="pl-4">VS Pierce</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayPhysicalDefense / @_calculation.DisplayPierceNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayMagicDefense / @_calculation.DisplayMagicNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayFireDefense / @_calculation.DisplayFireNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayLightningDefense / @_calculation.DisplayLightningNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayHolyDefense / @_calculation.DisplayHolyNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Immunity</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayImmunity / @_calculation.ImmunityArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Robustness</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayRobustness / @_calculation.RobustnessArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Focus</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayFocus / @_calculation.FocusArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Vitality</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_calculation.DisplayVitality / @_calculation.VitalityArmor</b></MudText>
                        </div>
                    </MudListItem>
                </MudList>

            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string? BuildId { get; set; }

    private EditContext? EditContext;
    private CharacterStatsCalculation _calculation = new CharacterStatsCalculation();
#pragma warning disable CS8618
    private BuildPlannerInput _input;
#pragma warning restore CS8618

    private List<Talisman> _talismans = new List<Talisman>();

    private IEnumerable<string> _talismanNames = new List<string>();

    private List<Armor> _headArmors = new List<Armor>();
    private List<Armor> _chestArmors = new List<Armor>();
    private List<Armor> _armsArmors = new List<Armor>();
    private List<Armor> _legsArmors = new List<Armor>();

    private IEnumerable<string> _headArmorNames = new List<string>();
    private IEnumerable<string> _chestArmorNames = new List<string>();
    private IEnumerable<string> _armsArmorNames = new List<string>();
    private IEnumerable<string> _legsArmorNames = new List<string>();

    private List<StartingClass> _startingClasses = new List<StartingClass>();

    private bool _statUpdatedSinceChangingStartingClass = false;

    protected override void OnInitialized()
    {
        _talismans = EquipmentService.Talismans.OrderBy(a => a.Name).ToList();

        _talismanNames = _talismans.Select(a => a.Name);

        _headArmors = EquipmentService.Armor.Where(a => a.EquipSlot == EquipmentSlots.Head).OrderBy(a => a.Name).ToList();

        _chestArmors = EquipmentService.Armor.Where(a => a.EquipSlot == EquipmentSlots.Body).OrderBy(a => a.Name).ToList();

        _armsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == EquipmentSlots.Arms).OrderBy(a => a.Name).ToList();

        _legsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == EquipmentSlots.Legs).OrderBy(a => a.Name).ToList();

        _headArmorNames = _headArmors.Select(a => a.Name);
        _chestArmorNames = _chestArmors.Select(a => a.Name);
        _armsArmorNames = _armsArmors.Select(a => a.Name);
        _legsArmorNames = _legsArmors.Select(a => a.Name);

        _startingClasses = EquipmentService.StartingClasses.OrderBy(a => a.Name).ToList();

        var vagabond = _startingClasses.Single(c => c.Name == StartingClasses.Vagabond);
        _input = new BuildPlannerInput(EquipmentService)
            {
                StartingClass = vagabond,
                Vigor = vagabond.Vigor,
                Mind = vagabond.Mind,
                Endurance = vagabond.Endurance,
                Strength = vagabond.Strength,
                Dexterity = vagabond.Dexterity,
                Intelligence = vagabond.Intelligence,
                Faith = vagabond.Faith,
                Arcane = vagabond.Arcane,
            };

        EditContext = new EditContext(_input);

        HandleValidSubmit();

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        var vagabond = _startingClasses.Single(c => c.Name == StartingClasses.Vagabond);

        if (BuildId != null)
        {
            _input = await SaveBuildService.LoadBuild(BuildId);
        }
        else
        {
            _input = new BuildPlannerInput(EquipmentService)
                {
                    StartingClass = vagabond,
                    Vigor = vagabond.Vigor,
                    Mind = vagabond.Mind,
                    Endurance = vagabond.Endurance,
                    Strength = vagabond.Strength,
                    Dexterity = vagabond.Dexterity,
                    Intelligence = vagabond.Intelligence,
                    Faith = vagabond.Faith,
                    Arcane = vagabond.Arcane,
                };
        }

        EditContext = new EditContext(_input);


        HandleValidSubmit();

        await base.OnParametersSetAsync();
    }

    private Task<IEnumerable<string>> HeadArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Head?.Name)
            {
                return Task.FromResult(_headArmorNames);
            }

            return Task.FromResult(_headArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_headArmorNames);
        }
    }

    private Task<IEnumerable<string>> ChestArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Chest?.Name)
            {
                return Task.FromResult(_chestArmorNames);
            }

            return Task.FromResult(_chestArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_chestArmorNames);
        }
    }

    private Task<IEnumerable<string>> ArmsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Arms?.Name)
            {
                return Task.FromResult(_armsArmorNames);
            }

            return Task.FromResult(_armsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_armsArmorNames);
        }
    }

    private Task<IEnumerable<string>> LegsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Legs?.Name)
            {
                return Task.FromResult(_legsArmorNames);
            }

            return Task.FromResult(_legsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_legsArmorNames);
        }
    }

    private Task<IEnumerable<string>> Talisman1Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Talisman1?.Name)
            {
                return Task.FromResult(_talismanNames);
            }

            return Task.FromResult(_talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman2Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Talisman2?.Name)
            {
                return Task.FromResult(_talismanNames);
            }

            return Task.FromResult(_talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman3Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Talisman3?.Name)
            {
                return Task.FromResult(_talismanNames);
            }

            return Task.FromResult(_talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_talismanNames);
        }
    }

    private Task<IEnumerable<string>> Talisman4Search(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Talisman4?.Name)
            {
                return Task.FromResult(_talismanNames);
            }

            return Task.FromResult(_talismanNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_talismanNames);
        }
    }

    private void UpdateRightWeapon1(string name)
    {
        _input.RightWeapon1.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2(string name)
    {
        _input.RightWeapon2.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3(string name)
    {
        _input.RightWeapon3.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1(string name)
    {
        _input.LeftWeapon1.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2(string name)
    {
        _input.LeftWeapon2.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3(string name)
    {
        _input.LeftWeapon3.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private bool TwoHand
    {
        get
        {
            return _input.TwoHand;
        }
        set
        {
            _input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateHead(string armor)
    {
        _input.Head = _headArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateChest(string armor)
    {
        _input.Chest = _chestArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateArms(string armor)
    {
        _input.Arms = _armsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateLegs(string armor)
    {
        _input.Legs = _legsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateTalisman1(string name)
    {
        _input.Talisman1 = _talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman2(string name)
    {
        _input.Talisman2 = _talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman3(string name)
    {
        _input.Talisman3 = _talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman4(string name)
    {
        _input.Talisman4 = _talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateVigor(int vig)
    {
        _input.Vigor = vig - _input.VigorBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateMind(int mind)
    {
        _input.Mind = mind - _input.MindBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateEndurance(int end)
    {
        _input.Endurance = end - _input.EnduranceBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateStrength(int str)
    {
        _input.Strength = str - _input.StrengthBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        _input.Dexterity = dex - _input.DexterityBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        _input.Intelligence = inte - _input.IntelligenceBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        _input.Faith = fth - _input.FaithBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        _input.Arcane = arc - _input.ArcaneBonus;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Affinity(int id)
    {
        _input.RightWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Level(int level)
    {
        _input.RightWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Affinity(int id)
    {
        _input.RightWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Level(int level)
    {
        _input.RightWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Affinity(int id)
    {
        _input.RightWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Level(int level)
    {
        _input.RightWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Affinity(int id)
    {
        _input.LeftWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Level(int level)
    {
        _input.LeftWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Affinity(int id)
    {
        _input.LeftWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Level(int level)
    {
        _input.LeftWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Affinity(int id)
    {
        _input.LeftWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Level(int level)
    {
        _input.LeftWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateStartingClass(string name)
    {
        var startingClass = _startingClasses.SingleOrDefault(c => c.Name == name);
        if (startingClass == null)
        {
            return;
        }

        _input.StartingClass = startingClass;

        // TODO: Scope this flag to each specific stat, refactor to use Math.Max for each
        if (_statUpdatedSinceChangingStartingClass)
        {
            _input.Vigor = _input.Vigor < startingClass.Vigor ? startingClass.Vigor : _input.Vigor;
            _input.Mind = _input.Mind < startingClass.Mind ? startingClass.Mind : _input.Mind;
            _input.Endurance = _input.Endurance < startingClass.Endurance ? startingClass.Endurance : _input.Endurance;
            _input.Strength = _input.Strength < startingClass.Strength ? startingClass.Strength : _input.Strength;
            _input.Dexterity = _input.Dexterity < startingClass.Dexterity ? startingClass.Dexterity : _input.Dexterity;
            _input.Intelligence = _input.Intelligence < startingClass.Intelligence ? startingClass.Intelligence : _input.Intelligence;
            _input.Faith = _input.Faith < startingClass.Faith ? startingClass.Faith : _input.Faith;
            _input.Arcane = _input.Arcane < startingClass.Arcane ? startingClass.Arcane : _input.Arcane;
        }
        else
        {
            _input.Vigor = startingClass.Vigor;
            _input.Mind = startingClass.Mind;
            _input.Endurance = startingClass.Endurance;
            _input.Strength = startingClass.Strength;
            _input.Dexterity = startingClass.Dexterity;
            _input.Intelligence = startingClass.Intelligence;
            _input.Faith = startingClass.Faith;
            _input.Arcane = startingClass.Arcane;
        }

        _statUpdatedSinceChangingStartingClass = false;

        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        if (_input == null)
        {
            return;
        }

        CharacterStatsCalculation? newCalc = null;

        try
        {
            newCalc = CalculationService.CalculateStats(_input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            _calculation = newCalc;
        }

        UpdateWeaponRequirements();
    }

    private void UpdateWeaponRequirements()
    {
        _input.RightWeapon1.GetScalingRequirements(_calculation.RightWeapon1);
        _input.RightWeapon2.GetScalingRequirements(_calculation.RightWeapon2);
        _input.RightWeapon3.GetScalingRequirements(_calculation.RightWeapon3);
        _input.LeftWeapon1.GetScalingRequirements(_calculation.LeftWeapon1);
        _input.LeftWeapon2.GetScalingRequirements(_calculation.LeftWeapon2);
        _input.LeftWeapon3.GetScalingRequirements(_calculation.LeftWeapon3);
    }


    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    private string StyleEquipBurden(double burden)
    {
        return burden < 70 ? "" : "font-weight: bold; color:red";
    }

    private async Task SaveBuild()
    {
        if (_input == null)
        {
            return;
        }

        var buildId = await SaveBuildService.SaveBuild(_input);

        NavigationManager.NavigateTo($"/build/{buildId}");
    }
}
