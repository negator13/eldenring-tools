@page "/planner"
@page "/build"
@page "/buildplanner"
@page "/character"
@page "/characterplanner"

@using EldenRingBlazor.Data
@using EldenRingBlazor.Data.AttackRating
@using EldenRingBlazor.Data.BuildPlanner
@using EldenRingBlazor.Data.Equipment
@inject BuildPlannerService CalculationService
@inject EquipmentService EquipmentService

<PageTitle>Build Planner</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">Build Planner</MudText>
    <MudGrid Spacing="6">
        <MudItem xs="6">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                @*TODO: Starting Class Dropdown*@

                <MudText Typo="Typo.h5" GutterBottom="true">Character</MudText>
                <MudGrid>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="VIG" Variant="Variant.Outlined" Value="@input.Vigor" ValueChanged="UpdateVigor" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="MIN" Variant="Variant.Outlined" Value="@input.Mind" ValueChanged="UpdateMind" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="END" Variant="Variant.Outlined" Value="@input.Endurance" ValueChanged="UpdateEndurance" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="STR" Variant="Variant.Outlined" Value="@input.Strength" ValueChanged="UpdateStrength" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSwitch @bind-Checked="@TwoHand" Label="Two-Hand" Color="Color.Info" /> (@(input.EffectiveStrength))
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="DEX" Variant="Variant.Outlined" Value="@input.Dexterity" ValueChanged="UpdateDexterity" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="INT" Variant="Variant.Outlined" Value="@input.Intelligence" ValueChanged="UpdateIntelligence" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="FAI" Variant="Variant.Outlined" Value="@input.Faith" ValueChanged="UpdateFaith" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="ARC" Variant="Variant.Outlined" Value="@input.Arcane" ValueChanged="UpdateArcane" />
                    </MudItem>
                </MudGrid>

                <MudGrid>

                    <MudItem xs="12">
                        <MudSelect Label="Weapon Category" T="string" Variant="Variant.Text"
                                   Value="weaponCategory"
                                   ValueChanged="@UpdateWeaponCategory">
                            @foreach (var category in weaponCategoryNames)
                            {
                                <MudSelectItem Value="@category" />
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudAutocomplete T="string"
                                         Label="Weapon"
                                         Value="@input.RightWeapon1Name"
                                         ValueChanged="UpdateRightWeapon1"
                                         SearchFunc="RightWeapon1Search"
                                         MaxItems="1000" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon1Level"
                                   ValueChanged="@UpdateWeaponLevel">
                            @foreach (var level in upgradeList)
                            {
                                <MudSelectItem Value="@level">+ @level</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @if (affinityList != null && affinityList.Any())
                    {
                        <MudItem xs="12">
                            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon1AffinityId"
                                   ValueChanged="@UpdateWeaponAffinity">
                                @foreach (var affinity in affinityList)
                                {
                                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem xs="6">
            
            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Level</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@input.DisplayLevel</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>HP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Hp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>FP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Fp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Stamina</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Stamina</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Equip Load</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.EquipLoad, 2)</b></MudText>
                        </div>
                    </MudListItem>
                     <MudListItem>
                        <div class="d-flex">
                            <MudText>Discovery</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Discovery</b></MudText>
                        </div>
                    </MudListItem>
                     <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical Defense</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.PhysicalDefense, 2)</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic Defense</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.MagicDefense, 2)</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire Defense</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.FireDefense, 2)</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning Defense</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.LightningDefense, 2)</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy Defense</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@Math.Round(calculation.HolyDefense, 2)</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Immunity</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Immunity</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Robustness</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Robustness</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Focus</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Focus</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Vitality</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.Vitality</b></MudText>
                        </div>
                    </MudListItem>
                </MudList>

                <MudText Typo="Typo.h5" GutterBottom="true">@calculation.RightWeapon1.Name</MudText>
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Total AR</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.RightWeapon1.DisplayTotalAttackRating</b></MudText>
                        </div>
                    </MudListItem>
                    <MudDivider />
                    @if (input.RightWeapon1.WeaponType == "Sacred Seal" || input.RightWeapon1.WeaponType == "Glintstone Staff")
                    {
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>Sorc/Incant Scaling</MudText>
                                <MudText Class="ml-auto">
                                    @string.Format("{0:0.0}", calculation.RightWeapon1.SorceryIncantation.Total)
                                </MudText>
                            </div>
                        </MudListItem>
                    }
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Weight</MudText>
                            <MudText Inline="true" Class="ml-auto">@string.Format("{0:0.0}", input.RightWeapon1.Weight)</MudText>
                        </div>
                    </MudListItem>
                </MudList>

                @*<MudTable Items=@scalingRequirements>
                    <HeaderContent>
                        <MudTh>@calculation.Name</MudTh>
                        <MudTh>STR</MudTh>
                        <MudTh>DEX</MudTh>
                        <MudTh>INT</MudTh>
                        <MudTh>FAI</MudTh>
                        <MudTh>ARC</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><strong>@context.Label</strong></MudTd>
                        <MudTd DataLabel="STR" style="@StyleStatRequirement(@input.Strength, @input.Weapon.StrRequirement)">@context.Strength</MudTd>
                        <MudTd DataLabel="DEX" style="@StyleStatRequirement(@input.Dexterity, @input.Weapon.DexRequirement)">@context.Dexterity</MudTd>
                        <MudTd DataLabel="INT" style="@StyleStatRequirement(@input.Intelligence, @input.Weapon.IntRequirement)">@context.Intelligence</MudTd>
                        <MudTd DataLabel="FAI" style="@StyleStatRequirement(@input.Faith, @input.Weapon.FthRequirement)">@context.Faith</MudTd>
                        <MudTd DataLabel="ARC" style="@StyleStatRequirement(@input.Arcane, @input.Weapon.ArcRequirement)">@context.Arcane</MudTd>
                    </RowTemplate>
                </MudTable>*@

            </MudPaper>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private EditContext EditContext;
    private CharacterStatsCalculation calculation;
    private BuildPlannerInput input = new BuildPlannerInput();

    private IEnumerable<Weapon> weaponList = new List<Weapon>();

    private string weaponCategory = "All";
    private List<string> weaponCategoryNames = new List<string>();

    private int lastSelectedAffinity;
    private int lastSelectedNormalUpgrade;
    private int lastSelectedSpecialUpgrade;

    private IEnumerable<string> filteredWeaponNames = new List<string>();

    private IEnumerable<WeaponAffinity> affinityList = new List<WeaponAffinity>();
    private IEnumerable<int> upgradeList = new List<int>();

    private IEnumerable<ScalingRequirementsInfo> scalingRequirements = new List<ScalingRequirementsInfo>();

    private Task<IEnumerable<string>> RightWeapon1Search(string value)
    {
        return SearchWeapons(value, input.RightWeapon1Name);
    }

    private Task<IEnumerable<string>> SearchWeapons(string value, string currentSelection)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == currentSelection)
            {
                return Task.FromResult(filteredWeaponNames);
            }

            return Task.FromResult(filteredWeaponNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(filteredWeaponNames);
        }
    }

    private void UpdateWeaponCategory(string category)
    {
        try
        {
            weaponCategory = category;

            var matchingWeapons = category == "All" ? weaponList : weaponList.Where(c => c.WeaponType == category);

            filteredWeaponNames = matchingWeapons.Select(c => c.Name).OrderBy(c => c);
        }
        catch
        {

        }
    }

    private void UpdateRightWeapon1(string name)
    {
        UpdateWeapon(name, WeaponSlot.Right1);
    }

    private void UpdateWeapon(string name, WeaponSlot slot)
    {
        // TODO: Scope to particular right/left weapon

        try
        {
            var selectedWeapon = weaponList.FirstOrDefault(w => w.Name == name);

            if (selectedWeapon == null)
            {
                return;
            }

            var weapon = EquipmentService.GetWeapon(selectedWeapon.Id);

            if (weapon == null)
            {
                return;
            }

            if (input.RightWeapon1.Infusable == "Yes")
            {
                lastSelectedAffinity = input.RightWeapon1AffinityId;
            }

            if (input.RightWeapon1.MaxUpgrade > 10)
            {
                lastSelectedNormalUpgrade = input.RightWeapon1Level;
            }
            else
            {
                lastSelectedSpecialUpgrade = input.RightWeapon1Level;
            }


            input.RightWeapon1 = weapon;
            input.RightWeapon1Name = weapon.Name;
            input.RightWeapon1AffinityId = weapon.IsInfusable ? lastSelectedAffinity : 0;
            input.RightWeapon1Level = weapon.MaxUpgrade > 10 ? lastSelectedNormalUpgrade : lastSelectedSpecialUpgrade;

            affinityList = weapon.IsInfusable ? Affinities.StandardAffinities : new List<WeaponAffinity>();

            upgradeList = Enumerable.Range(0, weapon.MaxUpgrade + 1).AsQueryable();

            if (input.RightWeapon1Level > weapon.MaxUpgrade)
            {
                input.RightWeapon1Level = weapon.MaxUpgrade;
            }

            HandleValidSubmit();
        }
        catch
        {

        }
    }

    private bool TwoHand
    {
        get
        {
            return input.TwoHand;
        }
        set
        {
            input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateVigor(int vig)
    {
        input.Vigor = vig;
        HandleValidSubmit();
    }

    private void UpdateMind(int mind)
    {
        input.Mind = mind;
        HandleValidSubmit();
    }

    private void UpdateEndurance(int end)
    {
        input.Endurance = end;
        HandleValidSubmit();
    }

    private void UpdateStrength(int str)
    {
        input.Strength = str;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        input.Dexterity = dex;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        input.Intelligence = inte;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        input.Faith = fth;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        input.Arcane = arc;
        HandleValidSubmit();
    }

    private void UpdateWeaponAffinity(int id)
    {
        input.RightWeapon1AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateWeaponLevel(int level)
    {
        input.RightWeapon1Level = level;
        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        CharacterStatsCalculation? newCalc = null;

        try
        {
            //newCalc = CalculationService.CalculateAttackRating(input);
            calculation = CalculationService.CalculateStats(input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            calculation = newCalc;
            // TODO: Scope to particular weapon slot
            GetScalingRequirements(input.RightWeapon1, calculation.RightWeapon1);
        }
    }

    private void GetScalingRequirements(Weapon weapon, AttackRatingCalculation calculation)
    {
        var info = new List<ScalingRequirementsInfo>();

        info.Add(new ScalingRequirementsInfo
            {
                Label = "Reqs.",
                Strength = $"{weapon.StrRequirement}",
                Dexterity = $"{weapon.DexRequirement}",
                Intelligence = $"{weapon.IntRequirement}",
                Faith = $"{weapon.FthRequirement}",
                Arcane = $"{weapon.ArcRequirement}",
            });

        info.Add(new ScalingRequirementsInfo
            {
                Label = "Scaling",
                Strength = $"{calculation.StrScaling:0.#}",
                Dexterity = $"{calculation.DexScaling:0.#}",
                Intelligence = $"{calculation.IntScaling:0.#}",
                Faith = $"{calculation.FthScaling:0.#}",
                Arcane = $"{calculation.ArcScaling:0.#}",
            });

        info.Add(new ScalingRequirementsInfo
            {
                Label = "",
                Strength = $"{calculation.StrScaling.GetScalingGrade()}",
                Dexterity = $"{calculation.DexScaling.GetScalingGrade()}",
                Intelligence = $"{calculation.IntScaling.GetScalingGrade()}",
                Faith = $"{calculation.FthScaling.GetScalingGrade()}",
                Arcane = $"{calculation.ArcScaling.GetScalingGrade()}",
            });

        scalingRequirements = info;
    }

    private string StyleStatRequirement(int stat, int req)
    {
        if (stat >= req)
        {
            return "font-weight: bold;";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }

    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    protected override void OnInitialized()
    {
        weaponList = EquipmentService.BaseWeapons;

        filteredWeaponNames = weaponList.Select(w => w.Name);

        weaponCategoryNames = new List<string>() { "All" };
        weaponCategoryNames.AddRange(weaponList.Select(c => c.WeaponType).Distinct().OrderBy(c => c));

        var weapon = weaponList.Single(w => w.Id == 10080000);

        input = new BuildPlannerInput
            {
                Vigor = 60,
                Mind = 10,
                Endurance = 25,
                Strength = 25,
                Dexterity = 35,
                Intelligence = 9,
                Faith = 9,
                Arcane = 7,
                RightWeapon1 = weapon,
                RightWeapon1Level = 25,
            };

        EditContext = new EditContext(input);

        UpdateWeapon(weapon.Name, WeaponSlot.Right1);

        base.OnInitialized();
    }
}
