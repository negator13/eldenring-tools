@page "/planner"
@page "/build"
@page "/buildplanner"
@page "/character"
@page "/characterplanner"

@using EldenRingBlazor.Data
@using EldenRingBlazor.Data.AttackRating
@using EldenRingBlazor.Data.BuildPlanner
@using EldenRingBlazor.Data.Equipment
@inject BuildPlannerService CalculationService
@inject EquipmentService EquipmentService

<PageTitle>Build Planner</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">Build Planner</MudText>
    <MudGrid Spacing="6">
        <MudItem xs="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudGrid>

                    <MudItem xs="12">
                        <MudSelect Label="Starting Class" T="string" Variant="Variant.Text"
                                   Value="@input.StartingClass?.Name"
                                   ValueChanged="@UpdateStartingClass">
                            @foreach (var startingClass in startingClasses)
                            {
                                <MudSelectItem Value="@startingClass.Name">@startingClass.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField T="int" Label="VIG" Variant="Variant.Outlined" Value="@input.Vigor" ValueChanged="UpdateVigor" Min=@input.StartingClass.Vigor Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="MIN" Variant="Variant.Outlined" Value="@input.Mind" ValueChanged="UpdateMind" Min=@input.StartingClass.Mind Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="END" Variant="Variant.Outlined" Value="@input.Endurance" ValueChanged="UpdateEndurance" Min=@input.StartingClass.Endurance Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="STR" Variant="Variant.Outlined" Value="@input.Strength" ValueChanged="UpdateStrength" Min=@input.StartingClass.Strength Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="DEX" Variant="Variant.Outlined" Value="@input.Dexterity" ValueChanged="UpdateDexterity" Min=@input.StartingClass.Dexterity Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="INT" Variant="Variant.Outlined" Value="@input.Intelligence" ValueChanged="UpdateIntelligence" Min=@input.StartingClass.Intelligence Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="FAI" Variant="Variant.Outlined" Value="@input.Faith" ValueChanged="UpdateFaith" Min=@input.StartingClass.Faith Max=99 />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="ARC" Variant="Variant.Outlined" Value="@input.Arcane" ValueChanged="UpdateArcane" Min=@input.StartingClass.Arcane Max=99 />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        @*<MudSelect Label="Head" T="string" Variant="Variant.Text"
                                   Value="@input.Head?.Name"
                                   ValueChanged="@UpdateHead">
                            @foreach (var armor in headArmors)
                            {
                                <MudSelectItem Value="@armor.Name">@armor.Name</MudSelectItem>
                            }
                        </MudSelect>*@

                        <MudAutocomplete T="string"
                                         Label="Head"
                                         Value="@input.Head?.Name"
                                         ValueChanged="UpdateHead"
                                         SearchFunc="HeadArmorSearch"
                                         MaxItems="1000" />

                    </MudItem>
                    <MudItem xs="6">
                        @*<MudSelect Label="Chest" T="string" Variant="Variant.Text"
                                   Value="@input.Chest?.Name"
                                   ValueChanged="@UpdateChest">
                            @foreach (var armor in chestArmors)
                            {
                                <MudSelectItem Value="@armor.Name">@armor.Name</MudSelectItem>
                            }
                        </MudSelect>*@

                        <MudAutocomplete T="string"
                                         Label="Chest"
                                         Value="@input.Chest?.Name"
                                         ValueChanged="UpdateChest"
                                         SearchFunc="ChestArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        @*<MudSelect Label="Arms" T="string" Variant="Variant.Text"
                                   Value="@input.Arms?.Name"
                                   ValueChanged="@UpdateArms">
                            @foreach (var armor in armsArmors)
                            {
                                <MudSelectItem Value="@armor.Name">@armor.Name</MudSelectItem>
                            }
                        </MudSelect>*@

                        <MudAutocomplete T="string"
                                         Label="Arms"
                                         Value="@input.Arms?.Name"
                                         ValueChanged="UpdateArms"
                                         SearchFunc="ArmsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>
                    <MudItem xs="6">
                        @*<MudSelect Label="Legs" T="string" Variant="Variant.Text"
                                   Value="@input.Legs?.Name"
                                   ValueChanged="@UpdateLegs">
                            @foreach (var armor in legsArmors)
                            {
                                <MudSelectItem Value="@armor.Name">@armor.Name</MudSelectItem>
                            }
                        </MudSelect>*@

                        <MudAutocomplete T="string"
                                         Label="Legs"
                                         Value="@input.Legs?.Name"
                                         ValueChanged="UpdateLegs"
                                         SearchFunc="LegsArmorSearch"
                                         MaxItems="1000" />
                    </MudItem>

                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudSelect Label="Talisman 1" T="string" Variant="Variant.Text"
                                   Value="@input.Talisman1?.Name"
                                   ValueChanged="@UpdateTalisman1">
                            @foreach (var talisman in talismans)
                            {
                                <MudSelectItem Value="@talisman.Name">@talisman.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Talisman 2" T="string" Variant="Variant.Text"
                                   Value="@input.Talisman2?.Name"
                                   ValueChanged="@UpdateTalisman2">
                            @foreach (var talisman in talismans)
                            {
                                <MudSelectItem Value="@talisman.Name">@talisman.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Talisman 3" T="string" Variant="Variant.Text"
                                   Value="@input.Talisman3?.Name"
                                   ValueChanged="@UpdateTalisman3">
                            @foreach (var talisman in talismans)
                            {
                                <MudSelectItem Value="@talisman.Name">@talisman.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Talisman 4" T="string" Variant="Variant.Text"
                                   Value="@input.Talisman4?.Name"
                                   ValueChanged="@UpdateTalisman4">
                            @foreach (var talisman in talismans)
                            {
                                <MudSelectItem Value="@talisman.Name">@talisman.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem xs="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudGrid>

                    <MudItem xs="6">
                        <MudSwitch @bind-Checked="@TwoHand" Label="Two-Hand Weapons" Color="Color.Info" />
                    </MudItem>

                    <MudItem xs="10">
                        <MudAutocomplete T="string"
                                         Label="Right Weapon 1"
                                         Value="@input.RightWeapon1.WeaponName"
                                         ValueChanged="UpdateRightWeapon1"
                                         SearchFunc="RightWeapon1Search"
                                         MaxItems="1000" />

                        <MudText Inline="true" Class="ml-auto"><b> @calculation.RightWeapon1?.DisplayTotalAttackRating</b></MudText>
                    </MudItem>

                    <MudItem xs="4">
                        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon1.Level"
                                   ValueChanged="@UpdateRightWeapon1Level">
                            @foreach (var level in input.RightWeapon1.UpgradeList)
                            {
                                <MudSelectItem Value="@level">+ @level</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="8">
                        @if (input.RightWeapon1.AffinityList != null && input.RightWeapon1.AffinityList.Any())
                        {
                            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon1.AffinityId"
                                   ValueChanged="@UpdateRightWeapon1Affinity">
                                @foreach (var affinity in input.RightWeapon1.AffinityList)
                                {
                                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>


                    @if (input.RightWeapon1?.Weapon != null)
                    {
                        <MudList Clickable="true">
                            @*<MudListItem>
                                <div class="d-flex">
                                <MudText>Total AR</MudText>
                                <MudText Inline="true" Class="ml-auto"><b>@calculation.RightWeapon1?.DisplayTotalAttackRating</b></MudText>
                                </div>
                                </MudListItem>*@
                            <MudDivider />
                            @if (input.RightWeapon1.Weapon?.WeaponType == "Sacred Seal" || input.RightWeapon1.Weapon?.WeaponType == "Glintstone Staff")
                            {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudText>Sorc/Incant Scaling</MudText>
                                        <MudText Class="ml-auto">
                                            @string.Format("{0:0.0}", calculation.RightWeapon1?.SorceryIncantation.Total)
                                        </MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }

                </MudGrid>

                @*TODO: Factor these weapon slots into components*@

                <MudGrid>

                    <MudItem xs="12">
                        <MudAutocomplete T="string"
                                         Label="Right Weapon 2"
                                         Value="@input.RightWeapon2.WeaponName"
                                         ValueChanged="UpdateRightWeapon2"
                                         SearchFunc="RightWeapon2Search"
                                         MaxItems="1000" />
                    </MudItem>

                    <MudItem xs="4">
                        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon2.Level"
                                   ValueChanged="@UpdateRightWeapon2Level">
                            @foreach (var level in input.RightWeapon2.UpgradeList)
                            {
                                <MudSelectItem Value="@level">+ @level</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="8">
                        @if (input.RightWeapon2.AffinityList != null && input.RightWeapon2.AffinityList.Any())
                        {
                            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                                   Value="@input.RightWeapon2.AffinityId"
                                   ValueChanged="@UpdateRightWeapon2Affinity">
                                @foreach (var affinity in input.RightWeapon2.AffinityList)
                                {
                                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>


                    @if (input.RightWeapon2?.Weapon != null)
                    {
                        <MudList Clickable="true">
                            @*<MudListItem>
                                <div class="d-flex">
                                <MudText>Total AR</MudText>
                                <MudText Inline="true" Class="ml-auto"><b>@calculation.RightWeapon2?.DisplayTotalAttackRating</b></MudText>
                                </div>
                                </MudListItem>*@
                            <MudDivider />
                            @if (input.RightWeapon2.Weapon?.WeaponType == "Sacred Seal" || input.RightWeapon2.Weapon?.WeaponType == "Glintstone Staff")
                            {
                                <MudListItem>
                                    <div class="d-flex">
                                        <MudText>Sorc/Incant Scaling</MudText>
                                        <MudText Class="ml-auto">
                                            @string.Format("{0:0.0}", calculation.RightWeapon2?.SorceryIncantation.Total)
                                        </MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }

                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem xs="4">

            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Level</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@input.DisplayLevel</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>HP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayHp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>FP</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFp</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Stamina</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayStamina</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Equip Load</MudText>
                            <MudText Inline="true" Class="ml-auto"><b><span style="@StyleEquipBurden(calculation.EquipBurdenPercent)">@calculation.DisplayWeight</span> / @calculation.DisplayEquipLoad <span style="@StyleEquipBurden(calculation.EquipBurdenPercent)">(@calculation.EquipBurdenPercent%)</span></b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Discovery</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayDiscovery</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Poise</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPoise</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayPhysicalNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>VS Strike</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayStrikeNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>VS Slash</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplaySlashNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>VS Pierce</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayPhysicalDefense / @calculation.DisplayPierceNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayMagicDefense / @calculation.DisplayMagicNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFireDefense / @calculation.DisplayFireNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayLightningDefense / @calculation.DisplayLightningNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy Defense / Negation</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayHolyDefense / @calculation.DisplayHolyNegation</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Immunity</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayImmunity / @calculation.ImmunityArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Robustness</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayRobustness / @calculation.RobustnessArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Focus</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayFocus / @calculation.FocusArmor</b></MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Vitality</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@calculation.DisplayVitality / @calculation.VitalityArmor</b></MudText>
                        </div>
                    </MudListItem>
                </MudList>

                @*<MudTable Items=@scalingRequirements>
                    <HeaderContent>
                    <MudTh>@calculation.Name</MudTh>
                    <MudTh>STR</MudTh>
                    <MudTh>DEX</MudTh>
                    <MudTh>INT</MudTh>
                    <MudTh>FAI</MudTh>
                    <MudTh>ARC</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                    <MudTd><strong>@context.Label</strong></MudTd>
                    <MudTd DataLabel="STR" style="@StyleStatRequirement(@input.Strength, @input.Weapon.StrRequirement)">@context.Strength</MudTd>
                    <MudTd DataLabel="DEX" style="@StyleStatRequirement(@input.Dexterity, @input.Weapon.DexRequirement)">@context.Dexterity</MudTd>
                    <MudTd DataLabel="INT" style="@StyleStatRequirement(@input.Intelligence, @input.Weapon.IntRequirement)">@context.Intelligence</MudTd>
                    <MudTd DataLabel="FAI" style="@StyleStatRequirement(@input.Faith, @input.Weapon.FthRequirement)">@context.Faith</MudTd>
                    <MudTd DataLabel="ARC" style="@StyleStatRequirement(@input.Arcane, @input.Weapon.ArcRequirement)">@context.Arcane</MudTd>
                    </RowTemplate>
                    </MudTable>*@

            </MudPaper>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private EditContext EditContext;
    private CharacterStatsCalculation calculation;
    private BuildPlannerInput input;

    private List<Talisman> talismans { get; set; }

    private List<Armor> headArmors { get; set; }
    private List<Armor> chestArmors { get; set; }
    private List<Armor> armsArmors { get; set; }
    private List<Armor> legsArmors { get; set; }

    private IEnumerable<string> headArmorNames = new List<string>();
    private IEnumerable<string> chestArmorNames = new List<string>();
    private IEnumerable<string> armsArmorNames = new List<string>();
    private IEnumerable<string> legsArmorNames = new List<string>();

    private List<StartingClass> startingClasses { get; set; }

    private bool statUpdatedSinceChangingStartingClass = false;

    private Task<IEnumerable<string>> HeadArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Head?.Name)
            {
                return Task.FromResult(headArmorNames);
            }

            return Task.FromResult(headArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(headArmorNames);
        }
    }

    private Task<IEnumerable<string>> ChestArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Chest?.Name)
            {
                return Task.FromResult(chestArmorNames);
            }

            return Task.FromResult(chestArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(chestArmorNames);
        }
    }

    private Task<IEnumerable<string>> ArmsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Arms?.Name)
            {
                return Task.FromResult(armsArmorNames);
            }

            return Task.FromResult(armsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(armsArmorNames);
        }
    }

    private Task<IEnumerable<string>> LegsArmorSearch(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == input.Legs?.Name)
            {
                return Task.FromResult(legsArmorNames);
            }

            return Task.FromResult(legsArmorNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(legsArmorNames);
        }
    }

    private Task<IEnumerable<string>> RightWeapon1Search(string value)
    {
        return input.RightWeapon1.SearchWeapons(value);
    }

    private Task<IEnumerable<string>> RightWeapon2Search(string value)
    {
        return input.RightWeapon2.SearchWeapons(value);
    }

    private void UpdateRightWeapon1(string name)
    {
        input.RightWeapon1.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2(string name)
    {
        input.RightWeapon2.UpdateWeapon(name);
        HandleValidSubmit();
    }

    private bool TwoHand
    {
        get
        {
            return input.TwoHand;
        }
        set
        {
            input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateHead(string armor)
    {
        input.Head = headArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateChest(string armor)
    {
        input.Chest = chestArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateArms(string armor)
    {
        input.Arms = armsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateLegs(string armor)
    {
        input.Legs = legsArmors.Single(a => a.Name == armor);
        HandleValidSubmit();
    }

    private void UpdateTalisman1(string name)
    {
        input.Talisman1 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman2(string name)
    {
        input.Talisman2 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman3(string name)
    {
        input.Talisman3 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateTalisman4(string name)
    {
        input.Talisman4 = talismans.Single(t => t.Name == name);
        HandleValidSubmit();
    }

    private void UpdateVigor(int vig)
    {
        input.Vigor = vig;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateMind(int mind)
    {
        input.Mind = mind;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateEndurance(int end)
    {
        input.Endurance = end;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateStrength(int str)
    {
        input.Strength = str;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        input.Dexterity = dex;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        input.Intelligence = inte;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        input.Faith = fth;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        input.Arcane = arc;
        statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Affinity(int id)
    {
        input.RightWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon1Level(int level)
    {
        input.RightWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Affinity(int id)
    {
        input.RightWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon2Level(int level)
    {
        input.RightWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Affinity(int id)
    {
        input.RightWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateRightWeapon3Level(int level)
    {
        input.RightWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Affinity(int id)
    {
        input.LeftWeapon1.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon1Level(int level)
    {
        input.LeftWeapon1.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Affinity(int id)
    {
        input.LeftWeapon2.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon2Level(int level)
    {
        input.LeftWeapon2.Level = level;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Affinity(int id)
    {
        input.LeftWeapon3.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateLeftWeapon3Level(int level)
    {
        input.LeftWeapon3.Level = level;
        HandleValidSubmit();
    }

    private void UpdateStartingClass(string name)
    {
        var startingClass = startingClasses.SingleOrDefault(c => c.Name == name);
        if (startingClass == null)
        {
            return;
        }

        input.StartingClass = startingClass;

        // TODO: Scope this flag to each specific stat, refactor to use Math.Max for each
        if (statUpdatedSinceChangingStartingClass)
        {
            input.Vigor = input.Vigor < startingClass.Vigor ? startingClass.Vigor : input.Vigor;
            input.Mind = input.Mind < startingClass.Mind ? startingClass.Mind : input.Mind;
            input.Endurance = input.Endurance < startingClass.Endurance ? startingClass.Endurance : input.Endurance;
            input.Strength = input.Strength < startingClass.Strength ? startingClass.Strength : input.Strength;
            input.Dexterity = input.Dexterity < startingClass.Dexterity ? startingClass.Dexterity : input.Dexterity;
            input.Intelligence = input.Intelligence < startingClass.Intelligence ? startingClass.Intelligence : input.Intelligence;
            input.Faith = input.Faith < startingClass.Faith ? startingClass.Faith : input.Faith;
            input.Arcane = input.Arcane < startingClass.Arcane ? startingClass.Arcane : input.Arcane;
        }
        else
        {
            input.Vigor = startingClass.Vigor;
            input.Mind = startingClass.Mind;
            input.Endurance = startingClass.Endurance;
            input.Strength = startingClass.Strength;
            input.Dexterity = startingClass.Dexterity;
            input.Intelligence = startingClass.Intelligence;
            input.Faith = startingClass.Faith;
            input.Arcane = startingClass.Arcane;
        }

        statUpdatedSinceChangingStartingClass = false;

        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        CharacterStatsCalculation? newCalc = null;

        try
        {
            newCalc = CalculationService.CalculateStats(input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            calculation = newCalc;
            GetScalingRequirements(input.RightWeapon1, calculation.RightWeapon1);
            GetScalingRequirements(input.RightWeapon2, calculation.RightWeapon2);
            GetScalingRequirements(input.RightWeapon3, calculation.RightWeapon3);
            GetScalingRequirements(input.LeftWeapon1, calculation.LeftWeapon1);
            GetScalingRequirements(input.LeftWeapon2, calculation.LeftWeapon2);
            GetScalingRequirements(input.LeftWeapon3, calculation.LeftWeapon3);
        }
    }

    private void GetScalingRequirements(WeaponSlot slot, AttackRatingCalculation calculation)
    {
        var info = new List<ScalingRequirementsInfo>();

        if (slot?.Weapon == null)
        {
            return;
        }

        var weapon = slot.Weapon;

        info.Add(new ScalingRequirementsInfo
            {
                Label = "Reqs.",
                Strength = $"{weapon.StrRequirement}",
                Dexterity = $"{weapon.DexRequirement}",
                Intelligence = $"{weapon.IntRequirement}",
                Faith = $"{weapon.FthRequirement}",
                Arcane = $"{weapon.ArcRequirement}",
            });

        info.Add(new ScalingRequirementsInfo
            {
                Label = "Scaling",
                Strength = $"{calculation.StrScaling:0.#}",
                Dexterity = $"{calculation.DexScaling:0.#}",
                Intelligence = $"{calculation.IntScaling:0.#}",
                Faith = $"{calculation.FthScaling:0.#}",
                Arcane = $"{calculation.ArcScaling:0.#}",
            });

        info.Add(new ScalingRequirementsInfo
            {
                Label = "",
                Strength = $"{calculation.StrScaling.GetScalingGrade()}",
                Dexterity = $"{calculation.DexScaling.GetScalingGrade()}",
                Intelligence = $"{calculation.IntScaling.GetScalingGrade()}",
                Faith = $"{calculation.FthScaling.GetScalingGrade()}",
                Arcane = $"{calculation.ArcScaling.GetScalingGrade()}",
            });

        slot.ScalingRequirements = info;
    }

    private string StyleStatRequirement(int stat, int req)
    {
        if (stat >= req)
        {
            return "font-weight: bold;";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }

    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    private string StyleEquipBurden(double burden)
    {
        return burden < 70 ? "" : "font-weight: bold; color:red";
    }

    protected override void OnInitialized()
    {


        talismans = EquipmentService.Talismans.ToList();

        headArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Head").OrderBy(a => a.Name).ToList();

        chestArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Body").OrderBy(a => a.Name).ToList();

        armsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Arm").OrderBy(a => a.Name).ToList();

        legsArmors = EquipmentService.Armor.Where(a => a.EquipSlot == "Leg").OrderBy(a => a.Name).ToList();

        headArmorNames = headArmors.Select(a => a.Name);
        chestArmorNames = chestArmors.Select(a => a.Name);
        armsArmorNames = armsArmors.Select(a => a.Name);
        legsArmorNames = legsArmors.Select(a => a.Name);

        startingClasses = EquipmentService.StartingClasses.OrderBy(a => a.Name).ToList();

        var vagabond = startingClasses.Single(c => c.Name == "Vagabond");

        input = new BuildPlannerInput(EquipmentService)
            {
                StartingClass = vagabond,
                Vigor = vagabond.Vigor,
                Mind = vagabond.Mind,
                Endurance = vagabond.Endurance,
                Strength = vagabond.Strength,
                Dexterity = vagabond.Dexterity,
                Intelligence = vagabond.Intelligence,
                Faith = vagabond.Faith,
                Arcane = vagabond.Arcane,
            };

        EditContext = new EditContext(input);

        HandleValidSubmit();

        base.OnInitialized();
    }
}
