@page "/drops"
@page "/item-drops"

@using EldenRingBlazor.Services
@using EldenRingBlazor.Services.ItemDrops
@using EldenRingBlazor.Components
@inject NpcItemDropService NpcItemDropService

<PageTitle>Item Drop Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true">Item Drop Calculator</MudText>
    <MudText Typo="Typo.body1">
    </MudText>
    <br />
    <MudGrid Spacing="6">
        <MudItem sm="12" md="4">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">
                <MudGrid>
                    <MudItem xs="12">
                        <MudAutocomplete T="string"
                                         Label="Item"
                                         Value="@_input.Item"
                                         ValueChanged="UpdateItem"
                                         SearchFunc="SearchItems"
                                         MaxItems="1000" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField T="int" Label="Discovery" Variant="Variant.Outlined" Value="@_input.Discovery" ValueChanged="UpdateDiscovery" Min=0 Max=999 />
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>

        <MudItem sm="12" md="4">

            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Drop Chance</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@(_calculation?.PercentChance)%</b></MudText>
                        </div>
                    </MudListItem>
                </MudList>

            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string? BuildId { get; set; }

    private EditContext? EditContext;
    private ItemDropCalculation? _calculation;
    private ItemDropCalculationInput _input = new ItemDropCalculationInput();

    private List<ItemDropData> _itemDrops = new List<ItemDropData>();
    private IEnumerable<string> _filteredItemNames = new List<string>();

    protected override void OnInitialized()
    {
        _input = new ItemDropCalculationInput();
        EditContext = new EditContext(_input);
    }

    protected override async Task OnParametersSetAsync()
    {
        _input = new ItemDropCalculationInput { Discovery = 100 };

        _itemDrops = NpcItemDropService._allItemDrops.OrderBy(i => i.Item).ToList();

        _filteredItemNames = _itemDrops.Select(w => w.Item).ToList();

        EditContext = new EditContext(_input);

        await base.OnParametersSetAsync();
    }

    private void UpdateDiscovery(int discovery)
    {
        if (_input == null)
        {
            return;
        }

        _input.Discovery = discovery;
        HandleValidSubmit();
    }

    private void UpdateItem(string name)
    {
        if (_input == null)
        {
            return;
        }

        var itemData = _itemDrops.SingleOrDefault(c => c.Item == name);
        if (itemData == null)
        {
            return;
        }

        _input.Item = itemData.Item;
        _input.ItemChance = itemData.BaseWeight;

        HandleValidSubmit();
    }

    private Task<IEnumerable<string>> SearchItems(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.Item)
            {
                return Task.FromResult(_filteredItemNames);
            }

            return Task.FromResult(_filteredItemNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_filteredItemNames);
        }
    }

    private void HandleValidSubmit()
    {
        if (_input == null)
        {
            return;
        }

        ItemDropCalculation? newCalc = null;

        try
        {
            newCalc = NpcItemDropService.Calculate(_input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            _calculation = newCalc;
        }
    }
}
