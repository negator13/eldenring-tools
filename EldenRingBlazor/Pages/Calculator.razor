@page "/calculator"
@page "/calculatear"
@page "/arcalculator"

@using EldenRingBlazor.Services
@using EldenRingBlazor.Services.AttackRating
@using EldenRingBlazor.Services.BuildPlanner
@using EldenRingBlazor.Services.Equipment
@using EldenRingBlazor.WellKnown
@inject AttackRatingCalculationService CalculationService
@inject EquipmentService EquipmentService

<PageTitle>AR Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">AR Calculator</MudText>
    <MudGrid Spacing="6">
        <MudItem xs="6">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudText Typo="Typo.h5" GutterBottom="true">Character</MudText>
                <MudGrid>

                    <MudItem xs="12">
                        <MudSelect Label="Starting Class" T="string" Variant="Variant.Text"
                                   Value="@_selectedClass"
                                   ValueChanged="@UpdateStartingClass">
                            @foreach (var startingClass in _startingClasses)
                            {
                                <MudSelectItem Value="@startingClass.Name">@startingClass.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField T="int" Label="STR" Variant="Variant.Outlined" Value="@_input.Strength" ValueChanged="UpdateStrength" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSwitch @bind-Value="@TwoHand" Label="Two-Hand" Color="Color.Info" /> (@(_input.EffectiveTwoHandStrength))
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="DEX" Variant="Variant.Outlined" Value="@_input.Dexterity" ValueChanged="UpdateDexterity" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="INT" Variant="Variant.Outlined" Value="@_input.Intelligence" ValueChanged="UpdateIntelligence" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="FAI" Variant="Variant.Outlined" Value="@_input.Faith" ValueChanged="UpdateFaith" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="ARC" Variant="Variant.Outlined" Value="@_input.Arcane" ValueChanged="UpdateArcane" />
                    </MudItem>
                </MudGrid>

                <MudGrid>

                    <MudItem xs="12">
                        <MudSelect Label="Weapon Category" T="string" Variant="Variant.Text"
                                   Value="_weaponCategory"
                                   ValueChanged="@UpdateWeaponCategory">
                            @foreach (var category in _weaponCategoryNames)
                            {
                                <MudSelectItem Value="@category" />
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudAutocomplete T="string"
                                         Label="Weapon"
                                         Value="@_input.WeaponName"
                                         ValueChanged="UpdateWeapon"
                                         SearchFunc="SearchWeapons"
                                         MaxItems="1000" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                                   Value="@_input.WeaponLevel"
                                   ValueChanged="@UpdateWeaponLevel">
                            @foreach (var level in _upgradeList)
                            {
                                <MudSelectItem Value="@level">+ @level</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @if (_affinityList != null && _affinityList.Any())
                    {
                        <MudItem xs="12">
                            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                                       Value="@_input.AffinityId"
                                       ValueChanged="@UpdateWeaponAffinity">
                                @foreach (var affinity in _affinityList)
                                {
                                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem xs="6">
            <MudText Typo="Typo.h5" GutterBottom="true">@_attackRatingCalculation?.Name</MudText>
            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Total AR</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@_attackRatingCalculation?.DisplayTotalAttackRating</b></MudText>
                        </div>
                    </MudListItem>
                    <MudDivider />
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical</MudText>
                            <MudText Inline="true" Class="ml-auto">
                                <b>@_attackRatingCalculation?.Physical.DisplayTotal</b>
                            </MudText>
                        </div>
                        @if (_attackRatingCalculation?.Physical.DisplayTotal > 0)
                        {
                            <div class="d-flex">
                                <MudText Inline="true" Class="ml-auto">
                                    @_attackRatingCalculation.Physical.Base
                                    @(_attackRatingCalculation.Physical.TotalScaling >= 0 ? " +" : " ")
                                    <span style="@StyleNumber(_attackRatingCalculation.Physical.TotalScaling)">@_attackRatingCalculation.Physical.TotalScaling</span>
                                </MudText>
                            </div>
                        }
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic</MudText>
                            <MudText Class="ml-auto">
                                <b>@_attackRatingCalculation?.Magic.DisplayTotal</b>
                            </MudText>
                        </div>
                        @if (_attackRatingCalculation?.Magic.DisplayTotal > 0)
                        {
                            <div class="d-flex">
                                <MudText Class="ml-auto">
                                    @_attackRatingCalculation.Magic.Base
                                    @(_attackRatingCalculation.Magic.TotalScaling >= 0 ? " +" : " ")
                                    <span style="@StyleNumber(_attackRatingCalculation.Magic.TotalScaling)">@_attackRatingCalculation.Magic.TotalScaling</span>
                                </MudText>
                            </div>
                        }
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire</MudText>
                            <MudText Class="ml-auto">
                                <b>@_attackRatingCalculation?.Fire.DisplayTotal</b>
                            </MudText>
                        </div>
                        @if (_attackRatingCalculation?.Fire.DisplayTotal > 0)
                        {
                            <div class="d-flex">
                                <MudText Class="ml-auto">
                                    @_attackRatingCalculation.Fire.Base
                                    @(_attackRatingCalculation.Fire.TotalScaling >= 0 ? " +" : " ")
                                    <span style="@StyleNumber(_attackRatingCalculation.Fire.TotalScaling)">@_attackRatingCalculation.Fire.TotalScaling</span>
                                </MudText>
                            </div>
                        }
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning</MudText>
                            <MudText Class="ml-auto">
                                <b>@_attackRatingCalculation?.Lightning.DisplayTotal</b>
                            </MudText>
                        </div>
                        @if (_attackRatingCalculation?.Lightning.DisplayTotal > 0)
                        {
                            <div class="d-flex">
                                <MudText Class="ml-auto">
                                    @_attackRatingCalculation.Lightning.Base
                                    @(_attackRatingCalculation.Lightning.TotalScaling >= 0 ? " +" : " ")
                                    <span style="@StyleNumber(_attackRatingCalculation.Lightning.TotalScaling)">@_attackRatingCalculation.Lightning.TotalScaling</span>
                                </MudText>
                            </div>
                        }
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy</MudText>
                            <MudText Class="ml-auto">
                                <b>@_attackRatingCalculation?.Holy.DisplayTotal</b>
                            </MudText>
                        </div>
                        @if (_attackRatingCalculation?.Holy.DisplayTotal > 0)
                        {
                            <div class="d-flex">
                                <MudText Class="ml-auto">
                                    @_attackRatingCalculation.Holy.Base
                                    @(_attackRatingCalculation.Holy.TotalScaling >= 0 ? " +" : " ")
                                    <span style="@StyleNumber(_attackRatingCalculation.Holy.TotalScaling)">@_attackRatingCalculation.Holy.TotalScaling</span>
                                </MudText>
                            </div>
                        }
                    </MudListItem>
                    @if (_input.Weapon?.WeaponType == WeaponTypes.SacredSeal || _input.Weapon?.WeaponType == WeaponTypes.GlintstoneStaff)
                    {
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>Sorc/Incant Scaling</MudText>
                                <MudText Class="ml-auto">
                                    @string.Format("{0:0.0}", _attackRatingCalculation?.SorceryIncantation.Total)
                                </MudText>
                            </div>
                        </MudListItem>
                    }
                    @if (_attackRatingCalculation?.Effect1?.Value > 0)
                    {
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>@_attackRatingCalculation.Effect1.Type</MudText>
                                <MudText Inline="true" Class="ml-auto">@_attackRatingCalculation.Effect1.Value</MudText>
                            </div>
                        </MudListItem>
                    }
                    @if (_attackRatingCalculation?.Effect2?.Value > 0)
                    {
                        <MudListItem>
                            <div class="d-flex">
                                <MudText>@_attackRatingCalculation.Effect2.Type</MudText>
                                <MudText Inline="true" Class="ml-auto">@_attackRatingCalculation.Effect2.Value</MudText>
                            </div>
                        </MudListItem>
                    }
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Critical</MudText>
                            <MudText Inline="true" Class="ml-auto">@_input.Weapon?.Critical</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Stamina Damage</MudText>
                            <MudText Inline="true" Class="ml-auto">@_attackRatingCalculation?.StaminaDamage</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Weight</MudText>
                            <MudText Inline="true" Class="ml-auto">@string.Format("{0:0.0}", _input.Weapon?.Weight)</MudText>
                        </div>
                    </MudListItem>
                </MudList>

                <MudTable Items=@_scalingRequirements>
                    <HeaderContent>
                        <MudTh>@_attackRatingCalculation?.Name</MudTh>
                        <MudTh>STR</MudTh>
                        <MudTh>DEX</MudTh>
                        <MudTh>INT</MudTh>
                        <MudTh>FAI</MudTh>
                        <MudTh>ARC</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><strong>@context.Label</strong></MudTd>
                        <MudTd DataLabel="STR" style="@StyleStatRequirement(_input.EffectiveTwoHandStrength, _input.Weapon?.StrRequirement)">@context.Strength</MudTd>
                        <MudTd DataLabel="DEX" style="@StyleStatRequirement(_input.Dexterity, _input.Weapon?.DexRequirement)">@context.Dexterity</MudTd>
                        <MudTd DataLabel="INT" style="@StyleStatRequirement(_input.Intelligence, _input.Weapon?.IntRequirement)">@context.Intelligence</MudTd>
                        <MudTd DataLabel="FAI" style="@StyleStatRequirement(_input.Faith, _input.Weapon?.FthRequirement)">@context.Faith</MudTd>
                        <MudTd DataLabel="ARC" style="@StyleStatRequirement(_input.Arcane, _input.Weapon?.ArcRequirement)">@context.Arcane</MudTd>
                    </RowTemplate>
                </MudTable>

            </MudPaper>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private AttackRatingCalculation? _attackRatingCalculation;
    private AttackRatingCalculationInput _input = new AttackRatingCalculationInput();
    private EditContext? EditContext;

    private bool _statUpdatedSinceChangingStartingClass = false;
    string _selectedClass = StartingClasses.Vagabond;
    private List<StartingClass> _startingClasses = new List<StartingClass>();

    private IEnumerable<Weapon> _weaponList = new List<Weapon>();

    private string _weaponCategory = "All";
    private List<string> _weaponCategoryNames = new List<string>();

    private int _lastSelectedAffinity;
    private int _lastSelectedNormalUpgrade;
    private int _lastSelectedSpecialUpgrade;

    private IEnumerable<string> _filteredWeaponNames = new List<string>();

    private IEnumerable<WeaponAffinity> _affinityList = new List<WeaponAffinity>();
    private IEnumerable<int> _upgradeList = new List<int>();

    private IEnumerable<ScalingRequirementsInfo> _scalingRequirements = new List<ScalingRequirementsInfo>();

    private void UpdateStartingClass(string name)
    {
        var startingClass = _startingClasses.SingleOrDefault(c => c.Name == name);
        if (startingClass == null)
        {
            return;
        }

        // TODO: Scope this flag to each specific stat, refactor to use Math.Max for each
        if (_statUpdatedSinceChangingStartingClass)
        {
            _input.Strength = _input.Strength < startingClass.Strength ? startingClass.Strength : _input.Strength;
            _input.Dexterity = _input.Dexterity < startingClass.Dexterity ? startingClass.Dexterity : _input.Dexterity;
            _input.Intelligence = _input.Intelligence < startingClass.Intelligence ? startingClass.Intelligence : _input.Intelligence;
            _input.Faith = _input.Faith < startingClass.Faith ? startingClass.Faith : _input.Faith;
            _input.Arcane = _input.Arcane < startingClass.Arcane ? startingClass.Arcane : _input.Arcane;
        }
        else
        {
            _input.Strength = startingClass.Strength;
            _input.Dexterity = startingClass.Dexterity;
            _input.Intelligence = startingClass.Intelligence;
            _input.Faith = startingClass.Faith;
            _input.Arcane = startingClass.Arcane;
        }

        _selectedClass = startingClass.Name;
        _statUpdatedSinceChangingStartingClass = false;

        HandleValidSubmit();
    }

    private Task<IEnumerable<string>> SearchWeapons(string value)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(value) || value == _input.WeaponName)
            {
                return Task.FromResult(_filteredWeaponNames);
            }

            return Task.FromResult(_filteredWeaponNames.Where(w => w.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
        }
        catch
        {
            return Task.FromResult(_filteredWeaponNames);
        }
    }

    private void UpdateWeaponCategory(string category)
    {
        try
        {
            _weaponCategory = category;

            var matchingWeapons = category == "All" ? _weaponList : _weaponList.Where(c => c.WeaponType == category);

            _filteredWeaponNames = matchingWeapons.Select(c => c.Name).OrderBy(c => c);
        }
        catch
        {

        }
    }

    private void UpdateWeapon(string name)
    {
        if (_input == null)
        {
            return;
        }

        try
        {
            var selectedWeapon = _weaponList.FirstOrDefault(w => w.Name == name);

            if (selectedWeapon == null)
            {
                return;
            }

            var weapon = EquipmentService.GetWeapon(selectedWeapon.Id);

            if (weapon == null)
            {
                return;
            }

            if (_input.Weapon?.Infusable == "Yes")
            {
                _lastSelectedAffinity = _input.AffinityId;
            }

            if (_input.Weapon?.MaxUpgrade > 10)
            {
                _lastSelectedNormalUpgrade = _input.WeaponLevel;
            }
            else
            {
                _lastSelectedSpecialUpgrade = _input.WeaponLevel;
            }


            _input.Weapon = weapon;
            _input.WeaponName = weapon.Name;
            _input.AffinityId = weapon.IsInfusable ? _lastSelectedAffinity : 0;
            _input.WeaponLevel = weapon.MaxUpgrade > 10 ? _lastSelectedNormalUpgrade : _lastSelectedSpecialUpgrade;

            _affinityList = weapon.IsInfusable ? Affinities.StandardAffinities : new List<WeaponAffinity>();

            _upgradeList = Enumerable.Range(0, weapon.MaxUpgrade + 1).AsQueryable();

            if (_input.WeaponLevel > weapon.MaxUpgrade)
            {
                _input.WeaponLevel = weapon.MaxUpgrade;
            }

            HandleValidSubmit();
        }
        catch
        {

        }
    }

    private bool TwoHand
    {
        get
        {
            return _input.TwoHand;
        }
        set
        {
            _input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateStrength(int str)
    {
        _input.Strength = str;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        _input.Dexterity = dex;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        _input.Intelligence = inte;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        _input.Faith = fth;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        _input.Arcane = arc;
        _statUpdatedSinceChangingStartingClass = true;
        HandleValidSubmit();
    }

    private void UpdateWeaponAffinity(int id)
    {
        _input.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateWeaponLevel(int level)
    {
        _input.WeaponLevel = level;
        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        AttackRatingCalculation? newCalc = null;

        try
        {
            newCalc = CalculationService.CalculateAttackRating(_input);
        }
        catch
        {

        }

        if (newCalc != null)
        {
            _attackRatingCalculation = newCalc;
            GetScalingRequirements();
        }
    }

    private void GetScalingRequirements()
    {
        var info = new List<ScalingRequirementsInfo>();

        info.Add(new ScalingRequirementsInfo(_input.Weapon));

        if (_attackRatingCalculation != null)
        {
            info.Add(new ScalingRequirementsInfo(RequirementsLabel.Scaling, _attackRatingCalculation));
            info.Add(new ScalingRequirementsInfo(RequirementsLabel.Grade, _attackRatingCalculation));
        }

        _scalingRequirements = info;
    }

    private string StyleStatRequirement(int stat, int? req)
    {
        if (req == null || stat >= req)
        {
            return "font-weight: bold;";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }

    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    protected override void OnInitialized()
    {
        _weaponList = EquipmentService.BaseWeapons;

        _filteredWeaponNames = _weaponList.Select(w => w.Name);

        _weaponCategoryNames = new List<string>() { "All" };
        _weaponCategoryNames.AddRange(_weaponList.Select(c => c.WeaponType).Distinct().OrderBy(c => c));

        var weapon = _weaponList.Single(w => w.Id == 10080000);

        _startingClasses = EquipmentService.StartingClasses.OrderBy(a => a.Name).ToList();

        var vagabond = _startingClasses.Single(c => c.Name == StartingClasses.Vagabond);
        _selectedClass = StartingClasses.Vagabond;

        _input = new AttackRatingCalculationInput()
            {
                Strength = vagabond.Strength,
                Dexterity = vagabond.Dexterity,
                Intelligence = vagabond.Intelligence,
                Faith = vagabond.Faith,
                Arcane = vagabond.Arcane,
                Weapon = weapon,
                WeaponLevel = 25
            };

        EditContext = new EditContext(_input);

        UpdateWeapon(weapon.Name);

        base.OnInitialized();
    }
}
