@page "/calculator"
@page "/calculatear"

@using EldenRingBlazor.Data
@using EldenRingBlazor.Data.AttackRating
@inject AttackRatingCalculationService CalculationService

<PageTitle>AR Calculator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">AR Calculator</MudText>
    <MudGrid Spacing="6">
        <MudItem xs="6">
            <EditForm EditContext="@EditContext" OnValidSubmit="@HandleValidSubmit" Context="NewContext">

                <MudText Typo="Typo.h5" GutterBottom="true">Character</MudText>
                <MudGrid>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="STR" Variant="Variant.Outlined" Value="@input.Strength" ValueChanged="UpdateStrength" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSwitch @bind-Checked="@TwoHand" Label="Two-Hand" Color="Color.Info" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="DEX" Variant="Variant.Outlined" Value="@input.Dexterity" ValueChanged="UpdateDexterity" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="INT" Variant="Variant.Outlined" Value="@input.Intelligence" ValueChanged="UpdateIntelligence" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="FAI" Variant="Variant.Outlined" Value="@input.Faith" ValueChanged="UpdateFaith" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="int" Label="ARC" Variant="Variant.Outlined" Value="@input.Arcane" ValueChanged="UpdateArcane" />
                    </MudItem>
                </MudGrid>

                <MudGrid>

                    <MudItem xs="12">
                        <MudSelect Label="Weapon Category" T="string" Variant="Variant.Text"
                                   Disabled="true"
                                   Value="weaponCategory"
                                   ValueChanged="@UpdateWeaponCategory">
                            @foreach (var category in weaponCategoryList)
                            {
                                <MudSelectItem Value="@category" />
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudAutocomplete @ref="autocomplete"
                                         T="string"
                                         Label="Weapon"
                                         Value="@input.WeaponName"
                                         ValueChanged="UpdateWeapon"
                                         SearchFunc="SearchWeapons"
                                         SelectValueOnTab="true"
                                         SelectOnClick="true"
                                         CoerceText="true"
                                         MaxItems="1000" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                                   Value="@input.WeaponLevel"
                                   ValueChanged="@UpdateWeaponLevel">
                            @foreach (var level in upgradeList)
                            {
                                <MudSelectItem Value="@level">+ @level</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @if (affinityList != null && affinityList.Any())
                    {
                        <MudItem xs="12">
                            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                                   Value="@input.AffinityId"
                                   ValueChanged="@UpdateWeaponAffinity">
                                @foreach (var affinity in affinityList)
                                {
                                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                    }
                </MudGrid>

            </EditForm>
        </MudItem>

        <MudItem xs="6">
            <MudText Typo="Typo.h5" GutterBottom="true">@attackRatingCalculation.Name</MudText>
            <MudPaper Class="d-flex flex-column" Outlined="true">
                <MudList Clickable="true">
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Total AR</MudText>
                            <MudText Inline="true" Class="ml-auto"><b>@attackRatingCalculation.TotalAttackRating</b></MudText>
                        </div>
                    </MudListItem>
                    <MudDivider />
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Physical</MudText>
                            <MudText Inline="true" Class="ml-auto">
                                @attackRatingCalculation.Physical.Base
                                @(attackRatingCalculation.Physical.TotalScaling >= 0 ? " +" : " ")
                                <span style="@StyleNumber(attackRatingCalculation.Physical.TotalScaling)">@attackRatingCalculation.Physical.TotalScaling</span>
                            </MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Magic</MudText>
                            <MudText Class="ml-auto">
                                @attackRatingCalculation.Magic.Base
                                @(attackRatingCalculation.Magic.TotalScaling >= 0 ? " +" : " ")
                                <span style="@StyleNumber(attackRatingCalculation.Magic.TotalScaling)">@attackRatingCalculation.Magic.TotalScaling</span>
                            </MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Fire</MudText>
                            <MudText Class="ml-auto">
                                @attackRatingCalculation.Fire.Base
                                @(attackRatingCalculation.Fire.TotalScaling >= 0 ? " +" : " ")
                                <span style="@StyleNumber(attackRatingCalculation.Fire.TotalScaling)">@attackRatingCalculation.Fire.TotalScaling</span>
                            </MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Lightning</MudText>
                            <MudText Class="ml-auto">
                                @attackRatingCalculation.Lightning.Base
                                @(attackRatingCalculation.Lightning.TotalScaling >= 0 ? " +" : " ")
                                <span style="@StyleNumber(attackRatingCalculation.Lightning.TotalScaling)">@attackRatingCalculation.Lightning.TotalScaling</span>
                            </MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Holy</MudText>
                            <MudText Class="ml-auto">
                                @attackRatingCalculation.Holy.Base
                                @(attackRatingCalculation.Holy.TotalScaling >= 0 ? " +" : " ")
                                <span style="@StyleNumber(attackRatingCalculation.Holy.TotalScaling)">@attackRatingCalculation.Holy.TotalScaling</span>
                            </MudText>
                        </div>
                    </MudListItem>
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Sorcery/Incantation Scaling</MudText>
                            <MudText Class="ml-auto">
                                @(attackRatingCalculation.SorceryIncantation.Total > 100 ? attackRatingCalculation.SorceryIncantation.Total : "")
                            </MudText>
                        </div>
                    </MudListItem>
                </MudList>

                <MudTable Items=@scalingRequirements>
                    <HeaderContent>
                        <MudTh>@attackRatingCalculation.Name</MudTh>
                        <MudTh>STR</MudTh>
                        <MudTh>DEX</MudTh>
                        <MudTh>INT</MudTh>
                        <MudTh>FAI</MudTh>
                        <MudTh>ARC</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><strong>@context.Label</strong></MudTd>
                        <MudTd DataLabel="STR" style="@StyleStatRequirement(@input.Strength, @input.Weapon.StrRequirement)">@context.Strength</MudTd>
                        <MudTd DataLabel="DEX" style="@StyleStatRequirement(@input.Dexterity, @input.Weapon.DexRequirement)">@context.Dexterity</MudTd>
                        <MudTd DataLabel="INT" style="@StyleStatRequirement(@input.Intelligence, @input.Weapon.IntRequirement)">@context.Intelligence</MudTd>
                        <MudTd DataLabel="FAI" style="@StyleStatRequirement(@input.Faith, @input.Weapon.FthRequirement)">@context.Faith</MudTd>
                        <MudTd DataLabel="ARC" style="@StyleStatRequirement(@input.Arcane, @input.Weapon.ArcRequirement)">@context.Arcane</MudTd>
                    </RowTemplate>
                </MudTable>

            </MudPaper>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private EditContext EditContext;

    private AttackRatingCalculation attackRatingCalculation = new AttackRatingCalculation();
    private AttackRatingCalculationInput input = new AttackRatingCalculationInput();

    private IEnumerable<Weapon> weaponList = new List<Weapon>();

    private string weaponCategory = "All";
    private IEnumerable<string> weaponCategoryList = new List<string>();

    private IEnumerable<string> filteredWeaponNames = new List<string>();

    private IEnumerable<WeaponAffinity> affinityList = new List<WeaponAffinity>();
    private IEnumerable<int> upgradeList = new List<int>();

    private IEnumerable<ScalingRequirementsInfo> scalingRequirements = new List<ScalingRequirementsInfo>();

    private MudAutocomplete<string> autocomplete;

    private async Task<IEnumerable<string>> SearchWeapons(string value)
    {
        if (string.IsNullOrWhiteSpace(value) || value == input.WeaponName)
        {
            return filteredWeaponNames;
        }

        return filteredWeaponNames.Where(w => w.StartsWith(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void UpdateWeaponCategory(string category)
    {
        filteredWeaponNames = category == "All" ? weaponList.Select(w => w.Name) : weaponList.Select(w => w.Name)
            // TODO
            //.Where()
            ;
    }

    private void UpdateWeapon(string name)
    {
        var selectedWeapon = weaponList.FirstOrDefault(w => w.Name == name);

        if (selectedWeapon == null)
        {
            return;
        }

        var weapon = CalculationService.GetWeapon(selectedWeapon.Id);

        input.Weapon = weapon;
        input.WeaponName = weapon.Name;
        input.AffinityId = 0;

        affinityList = weapon.NonInfusable ? new List<WeaponAffinity>() : Affinities.StandardAffinities;

        upgradeList = Enumerable.Range(0, weapon.MaxUpgrade + 1).AsQueryable();

        if (input.WeaponLevel > weapon.MaxUpgrade)
        {
            input.WeaponLevel = weapon.MaxUpgrade;
        }

        HandleValidSubmit();
    }

    private bool TwoHand
    {
        get
        {
            return input.TwoHand;
        }
        set
        {
            input.TwoHand = value;
            HandleValidSubmit();
        }
    }

    private void UpdateStrength(int str)
    {
        input.Strength = str;
        HandleValidSubmit();
    }

    private void UpdateDexterity(int dex)
    {
        input.Dexterity = dex;
        HandleValidSubmit();
    }

    private void UpdateIntelligence(int inte)
    {
        input.Intelligence = inte;
        HandleValidSubmit();
    }

    private void UpdateFaith(int fth)
    {
        input.Faith = fth;
        HandleValidSubmit();
    }

    private void UpdateArcane(int arc)
    {
        input.Arcane = arc;
        HandleValidSubmit();
    }

    private void UpdateWeaponAffinity(int id)
    {
        input.AffinityId = id;
        HandleValidSubmit();
    }

    private void UpdateWeaponLevel(int level)
    {
        input.WeaponLevel = level;
        HandleValidSubmit();
    }

    private void HandleValidSubmit()
    {
        attackRatingCalculation = CalculationService.CalculateAttackRating(input);
        var info = new List<ScalingRequirementsInfo>();
        info.Add(new ScalingRequirementsInfo
            {
                Label = "Requirements",
                Strength = $"{input.Weapon.StrRequirement}",
                Dexterity = $"{input.Weapon.DexRequirement}",
                Intelligence = $"{input.Weapon.IntRequirement}",
                Faith = $"{input.Weapon.FthRequirement}",
                Arcane = $"{input.Weapon.ArcRequirement}",
            });
        info.Add(new ScalingRequirementsInfo
            {
                Label = "Scaling",
                Strength = $"{attackRatingCalculation.StrScaling} ({attackRatingCalculation.StrScalingGrade})",
                Dexterity = $"{attackRatingCalculation.DexScaling} ({attackRatingCalculation.DexScalingGrade})",
                Intelligence = $"{attackRatingCalculation.IntScaling} ({attackRatingCalculation.IntScalingGrade})",
                Faith = $"{attackRatingCalculation.FthScaling} ({attackRatingCalculation.FthScalingGrade})",
                Arcane = $"{attackRatingCalculation.ArcScaling} ({attackRatingCalculation.ArcScalingGrade})",
            });
        scalingRequirements = info;
    }

    private string StyleStatRequirement(int stat, int req)
    {
        if (stat >= req)
        {
            return "";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }

    private string StyleNumber(int num)
    {
        return num >= 0 ? "" : "font-weight: bold; color:red";
    }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(input);

        weaponList = CalculationService.BaseWeapons;

        filteredWeaponNames = weaponList.Select(w => w.Name);

        // TODO: Get distinct categories from weaponList
        weaponCategoryList = new List<string>() { "All" };
        //weaponCategoryList = new List<string>() { "All", "Straight Sword", "Axe", "Greatsword", "Staff" };

        var weapon = weaponList.Single(w => w.Id == 10080000);

        input = new AttackRatingCalculationInput
            {
                Strength = 25,
                Dexterity = 35,
                Intelligence = 9,
                Faith = 9,
                Arcane = 7,
                Weapon = weapon,
                WeaponLevel = 25,
            };

        UpdateWeapon(weapon.Name);

        base.OnInitialized();
    }
}
