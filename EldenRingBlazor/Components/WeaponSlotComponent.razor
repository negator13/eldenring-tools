@using EldenRingBlazor.Data.BuildPlanner
<MudGrid>
    <MudItem xs="12">
        <MudAutocomplete T="string"
                         Label="@SlotName"
                         Value="@Slot.WeaponName"
                         ValueChanged="UpdateWeapon"
                         SearchFunc="WeaponSearch"
                         MaxItems="1000" />
    </MudItem>

    <MudItem xs="4">
        <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                   Value="@Slot.Level"
                   ValueChanged="@UpdateWeaponLevel">
            @foreach (var level in Slot.UpgradeList)
            {
                <MudSelectItem Value="@level">+ @level</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="8">
        @if (Slot.AffinityList != null && Slot.AffinityList.Any())
        {
            <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                   Value="@Slot.AffinityId"
                   ValueChanged="@UpdateWeaponAffinity">
                @foreach (var affinity in Slot.AffinityList)
                {
                    <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                }
            </MudSelect>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public WeaponSlot Slot { get; set; }

    [Parameter]
    public string SlotName { get; set; }

    [Parameter]
    public EventCallback<string> UpdateWeapon { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponLevel { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponAffinity { get; set; }

    private Task<IEnumerable<string>> WeaponSearch(string value)
    {
        return Slot.SearchWeapons(value);
    }
}
