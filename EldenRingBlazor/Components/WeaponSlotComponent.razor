@using EldenRingBlazor.Data.BuildPlanner
@using EldenRingBlazor.Data.AttackRating
@using EldenRingBlazor.Data.Equipment
<MudGrid>
    <MudItem xs="8">
        <MudAutocomplete T="string"
                         Label="@Slot.SlotName"
                         Value="@Slot.WeaponName"
                         ValueChanged="UpdateWeapon"
                         SearchFunc="WeaponSearch"
                         ResetValueOnEmptyText=true
                         MaxItems="1000" />
    </MudItem>
    <MudItem xs="4">
        @if (Slot.Weapon != null)
        {
            <MudList Clickable="true">
                <MudListItem>
                    <div class="d-flex">
                        <MudText>Total AR</MudText>
                        <MudText Inline="true" Class="ml-auto"><b>&nbsp;@Calculation?.DisplayTotalAttackRating</b></MudText>
                    </div>
                </MudListItem>
                <MudDivider />
                @if (Slot.Weapon?.WeaponType == "Sacred Seal" || Slot.Weapon?.WeaponType == "Glintstone Staff")
                {
                    <MudListItem>
                        <div class="d-flex">
                            <MudText>Sorc/Incant Scaling</MudText>
                            <MudText Class="ml-auto">
                                @string.Format("{0:0.0}", @Calculation?.SorceryIncantation.DisplayTotal)
                            </MudText>
                        </div>
                    </MudListItem>
                }
            </MudList>
        }
    </MudItem>

    @if (Slot.Weapon != null && Input != null)
    {
        <MudItem xs="12">
            <MudText>
                Requirements: 
                <span style="@StyleStatRequirement(Input.Strength, Slot.Weapon.StrRequirement)">@Slot.Weapon.StrRequirement</span> / 
                <span style="@StyleStatRequirement(Input.Dexterity, Slot.Weapon.DexRequirement)">@Slot.Weapon.DexRequirement</span> /
                <span style="@StyleStatRequirement(Input.Intelligence, Slot.Weapon.IntRequirement)">@Slot.Weapon.IntRequirement</span> /
                <span style="@StyleStatRequirement(Input.Faith, Slot.Weapon.FthRequirement)">@Slot.Weapon.FthRequirement</span> /
                <span style="@StyleStatRequirement(Input.Arcane, Slot.Weapon.ArcRequirement)">@Slot.Weapon.ArcRequirement</span>
            </MudText>
            @*<MudTable Items=@Slot?.ScalingRequirements>
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>STR</MudTh>
                    <MudTh>DEX</MudTh>
                    <MudTh>INT</MudTh>
                    <MudTh>FAI</MudTh>
                    <MudTh>ARC</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd><strong>@context.Label</strong></MudTd>
                    <MudTd DataLabel="STR" style="@StyleStatRequirement(@Input.Strength, @Slot.Weapon.StrRequirement)">@context.Strength</MudTd>
                    <MudTd DataLabel="DEX" style="@StyleStatRequirement(@Input.Dexterity, @Slot.Weapon.DexRequirement)">@context.Dexterity</MudTd>
                    <MudTd DataLabel="INT" style="@StyleStatRequirement(@Input.Intelligence, @Slot.Weapon.IntRequirement)">@context.Intelligence</MudTd>
                    <MudTd DataLabel="FAI" style="@StyleStatRequirement(@Input.Faith, @Slot.Weapon.FthRequirement)">@context.Faith</MudTd>
                    <MudTd DataLabel="ARC" style="@StyleStatRequirement(@Input.Arcane, @Slot.Weapon.ArcRequirement)">@context.Arcane</MudTd>
                </RowTemplate>
            </MudTable>*@
        </MudItem>
    }

    @if (Slot.Weapon != null)
    {
        <MudItem xs="4">
            <MudSelect Label="Upgrade Level" T="int" Variant="Variant.Text"
                   Value="@Slot.Level"
                   ValueChanged="@UpdateWeaponLevel">
                @foreach (var level in Slot.UpgradeList)
                {
                    <MudSelectItem Value="@level">+ @level</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="8">
            @if (Slot.AffinityList != null && Slot.AffinityList.Any())
            {
                <MudSelect Label="Affinity" T="int" Variant="Variant.Text"
                   Value="@Slot.AffinityId"
                   ValueChanged="@UpdateWeaponAffinity">
                    @foreach (var affinity in Slot.AffinityList)
                    {
                        <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public WeaponSlot Slot { get; set; }

    [Parameter]
    public BuildPlannerInput Input { get; set; }

    [Parameter]
    public AttackRatingCalculation? Calculation { get; set; }

    [Parameter]
    public EventCallback<string> UpdateWeapon { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponLevel { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponAffinity { get; set; }

    private Task<IEnumerable<string>> WeaponSearch(string value)
    {
        return Slot.SearchWeapons(value);
    }

    private string StyleStatRequirement(int stat, int req)
    {
        if (stat >= req)
        {
            return "font-weight: bold;";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }
}
