@using EldenRingBlazor.Data.BuildPlanner
@using EldenRingBlazor.Data.AttackRating
@using EldenRingBlazor.Data.Equipment
<MudGrid>
    <MudItem xs="6">
        <MudAutocomplete T="string"
                         Label="@Slot.SlotName"
                         Value="@Slot.WeaponName"
                         ValueChanged="UpdateWeapon"
                         SearchFunc="WeaponSearch"
                         ResetValueOnEmptyText=true
                         MaxItems="1000" />
    </MudItem>

    @if (Slot.Weapon != null)
    {
        <MudItem xs="3">
            <MudSelect T="int" Variant="Variant.Text"
                   Value="@Slot.Level"
                   ValueChanged="@UpdateWeaponLevel">
                @foreach (var level in Slot.UpgradeList)
                {
                    <MudSelectItem Value="@level">+ @level</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="3">
            @if (Slot.AffinityList != null && Slot.AffinityList.Any())
            {
                <MudSelect T="int" Variant="Variant.Text"
                   Value="@Slot.AffinityId"
                   ValueChanged="@UpdateWeaponAffinity">
                    @foreach (var affinity in Slot.AffinityList)
                    {
                        <MudSelectItem Value="@affinity.Id">@affinity.Name</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudItem>

        <MudItem xs="6">
            @if (Slot.Weapon?.WeaponType == "Sacred Seal" || Slot.Weapon?.WeaponType == "Glintstone Staff")
            {
                var label = Slot.Weapon?.WeaponType == "Sacred Seal" ? "Incantation" : "Sorcery";
                <MudText>@($"{label} Scaling: ")<span style="@(MeetsRequirements ? "" : "color:red")"><b>@string.Format("{0:0.0}", @Calculation?.SorceryIncantation.DisplayTotal)</b></span></MudText>
            }
            else
            {
                <MudText>Total AR: <span style="@(MeetsRequirements ? "" : "color:red")"><b>@Calculation?.DisplayTotalAttackRating</b></span></MudText>
            }
        </MudItem>

        @if (Slot.Weapon != null && Input != null && !MeetsRequirements)
        {
            <MudItem xs="12">
                <MudText>
                    Requirements: <span style="@StyleStatRequirement(Input.Strength, Slot.Weapon.StrRequirement)">@Slot.Weapon.StrRequirement</span>/
                    <span style="@StyleStatRequirement(Input.Dexterity, Slot.Weapon.DexRequirement)">@Slot.Weapon.DexRequirement</span>/
                    <span style="@StyleStatRequirement(Input.Intelligence, Slot.Weapon.IntRequirement)">@Slot.Weapon.IntRequirement</span>/
                    <span style="@StyleStatRequirement(Input.Faith, Slot.Weapon.FthRequirement)">@Slot.Weapon.FthRequirement</span>/
                    <span style="@StyleStatRequirement(Input.Arcane, Slot.Weapon.ArcRequirement)">@Slot.Weapon.ArcRequirement</span>
                </MudText>
            </MudItem>
        }
    }
</MudGrid>

@code {
    [Parameter]
    public WeaponSlot? Slot { get; set; }

    [Parameter]
    public BuildPlannerInput? Input { get; set; }

    [Parameter]
    public AttackRatingCalculation? Calculation { get; set; }

    [Parameter]
    public EventCallback<string> UpdateWeapon { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponLevel { get; set; }

    [Parameter]
    public EventCallback<int> UpdateWeaponAffinity { get; set; }

    private bool MeetsRequirements => Slot?.Weapon == null || Input == null ?
        true :
        Input.Strength >= Slot.Weapon.StrRequirement
        && Input.Dexterity >= Slot.Weapon.DexRequirement
        && Input.Intelligence >= Slot.Weapon.IntRequirement
        && Input.Faith >= Slot.Weapon.FthRequirement
        && Input.Arcane >= Slot.Weapon.ArcRequirement;

    private Task<IEnumerable<string>> WeaponSearch(string value)
    {
        return Slot.SearchWeapons(value);
    }

    private string StyleStatRequirement(int stat, int req)
    {
        if (stat >= req)
        {
            return "font-weight: bold;";
        }
        else
        {
            return "font-weight: bold; color:red";
        }
    }
}
